---
title: "Tratamiento de textos. Primeras bases de datos"
subtitle: "Cuadernos prácticos de Software II del Grado en Ciencia de Datos Aplicada (curso 2024-2025)"
author: "Javier Álvarez Liébana"
format:
  html:
    theme: [default, style.scss]
    toc: true
    toc-title: Índice
    toc-depth: 5
    toc-location: left
    number-sections: true
embed-resources: true
execute: 
  echo: true
---

## Profundizando en textos

Aunque no podamos hacer operaciones aritméticas con ellos si serán importante algunas [**operaciones que podamos realizar con las cadenas de texto**]{.hl-yellow}. Para eso usaremos el paquete `{stringr}` (dentro del mismo «universo de paquetes» de `{lubridate}`)

```{r}
library(stringr)
```

Con dicho paquete vamos a trabajar particularmente con [**cuatro familias de funciones**]{.hl-yellow}

- [**Manipulación**]{.hl-purple}

- [**Tratamiento de espacios**]{.hl-purple}

- [**Búsqueda de patrones**]{.hl-purple}

### Utilidades básicas

#### Longitud

La más obvia es una función que, dada una cadena de texto (un string) nos proporcione la [**longitud**]{.hl-yellow}. Para ello podemos usar la función `str_length()`

```{r}
str_length("abc")
```

Es importante advertir que cuenta tanto [**números como espacios**]{.hl-yellow}, así como caracteres que **no sean alfanuméricos**. 
```{r}
str_length("abc 123 *")
```

Además si el texto es ausente devuelve ausente (recuerda: `NA` es ausente, `"NA"` es una cadena de texto más) 

```{r}
str_length(NA)
```

&nbsp;

Las [**funciones del paquete están preparadas para ser vectorizadas**]{.hl-yellow} lo que significa que si aplicamos una función a un vector de dos cadenas de texto la aplica a ambos de la misma forma.

```{r}
str_length(c("abc", "defghi"))
```

#### Ordenar

Otra muy habitual es [**ordenar cadenas de texto (por orden alfabético)**]{.hl-yellow}. Para ello podemos usar la función `str_order()`, distinguiendo `..._sort()` y `..._order()` como con los números

```{r}
x <- c("y", "i", "k")
str_order(x)
str_sort(x)
```


### Manipulación

#### Extraer subcadenas

* [**Extraer subcadenas**]{.hl-yellow}: dada una cadena de texto, `str_sub(texto, star = ..., end = ...)` nos extrae la subcadena desde la posición `star` hasta `end` (si es negativo empieza a contar por detrás).

```{r}
str_sub("abcd efg", star = 4, end = 6)
str_sub("abcd efg", star = 5)
str_sub("abcd efg", star = 4, end = -2)
```



* [**Extraer subcadenas**]{.hl-yellow}: la función `str_sub()` permite aplicarlo a de manera vectorial a múltiples cadenas de texto, e incluso usarla para asignar valores.

```{r}
x <- c("abcdef", "ghifjk")
str_sub(x, star = 3, end = -2)
str_sub(x, star = -1, end = -1)

# En ambas cadenas, sustituimos por * en la posición 2
str_sub(x, star = 2, end = 2) <- "*"
```

#### Duplicar cadenas

* [**Duplicar cadenas**]{.hl-yellow}: con `str_dup(..., times = ...)`, dada una cadena de texto (o varias), podemos repetir una cadena `times` veces.

```{r}
str_dup("abc", times = 3)

x <- c("abcdef", "ghifjk")
str_dup(x, times = c(2, 5))
```

#### Concatenar cadenas

* [**Concatenar cadenas**]{.hl-yellow}: con `str_c` podemos concatenar distintas cadenas de texto (con `sep = ...` indicamos el caracter que hará de separador)

```{r}
str_c("Buenos días", "Mi nombre es Javier")
str_c("Buenos días", "Mi nombre es Javier", sep = ". ")
```


#### Mayúsculas y minúsculas

* [**Mayúsculas/minúsculas**]{.hl-yellow}: con `str_to_...()` podemos convertir textos a mayúsculas (`..._upper`), a minúsculas (`..._lower`) y a título (`..._title`, primera letra de cada palabra en mayúscula)

```{r}
str_to_upper("me llamo Javi")
str_to_lower("me llamo Javi")
str_to_title("me llamo Javi")
```

#### Reemplazar

* [**Reemplazar**]{.hl-yellow}: `str_replace()` busca un patrón dado en una cadena de texto y, si la encuentra, la sustituye pro otra de reemplazo

```{r}
str_replace(c("javi", "sandra", "carlos"), pattern = "i", replacement = "*")
```

. . .

Con `str_replace_all()` reemplazamos todas las coincidencias (por defecto sino solo se reemplaza la primera)

```{r}
str_replace(c("javi", "sandra", "carlos"), pattern = "a", replacement = "*")
str_replace_all(c("javi", "sandra", "carlos"), pattern = "a", replacement = "*")
```


### Espacios en blanco

#### Rellenar espacios

* [**Rellenar**]{.hl-yellow}: la función `str_pad()` rellena una cadena con espacios (al inicio por defecto) para que tenga anchura indicada. Con `side = "both"` como argumento extra nos añade en ambos lados. Con `side = "right"` los añade al final. Con `pad = ...` podemos decidir si queremos rellenar con otro tipo de caracter (espacio por defecto).

```{r}
str_pad("abc", width = 6)
str_pad("abc", 12, side = "both")
str_pad("abc", 6, side = "right", pad = "*")
```

. . .

Si `width` es menor que la longitud de la cadena, no hace nada.

```{r}
str_pad("abc",  width = 2)
```

#### Eliminar espacios

* [**Eliminar espacios**]{.hl-yellow}: con `str_trim()` podemos eliminar espacios en blanco al inicio y al final de la cadena. Si añadimos `side = ...` podemos cambiar si queremos que solo los elimine al final o al inicio (por defecto, en ambos). Con `str_squish()` cambiamos cualquier sucesión de espacios en blanco en medio del texto por uno solo (y elimina al inicio y final)

```{r}
str_trim(" abcde   fghi ")
str_trim(" abcde   ")
str_trim(" abcde   ", side = "left")
str_squish(" abcde   fghi ")
```



### Patrones

#### Detectar. Expresiones regulares.

* [**Detectar**]{.hl-yellow}: con `str_detect()` podemos detectar si una cadena de texto contiene o no una secuencia de caracteres

```{r}
str_detect(c("javi álvarez", "javi reyes", "sandra reyes"), pattern = "javi")
str_detect(c("javi álvarez", "javi reyes", "sandra reyes"), pattern = "reyes")
str_detect(c("javi álvarez", "javi reyes", "sandra reyes"), pattern = "carlos")
```



* [**Expresiones regulares**]{.hl-yellow}: no solo vamos a poder detectar patrones simples sino que podemos hacer uso de las conocidas como **expresiones regulares**, indicándole por ejemplo que queremos localizar todo patrón que sea, al menos una letra

```{r}
str_detect(c("a", "ab", "abc", "abcd"), pattern = "[a-z]")
```

. . .

Si tras los corchetes indicamos `{n}` podemos detectar aquellas cadenas con n letras consecutivas

```{r}
str_detect(c("a", "ab", "abc", "abcd"), pattern = "[a-z]{3}")
```



* [**Expresiones regulares**]{.hl-yellow}: un buen manejo de estas expresiones puede sernos muy útil para, por ejemplo, detectar formatos correctos en DNI o números de teléfono (de Madrid, por ejemplo).

Vamos a considerar que un formato correcto de DNI es aquel seguido por 8 números (`[0-9]{8}`) seguido directamente de una letra mayúscula (`[A-Z]`).

```{r}
str_detect(c("5055A198-W", "50508040W", "5050505W", "50508040-W"),
           pattern = "[0-9]{8}[A-Z]")
```

. . .

Podemos buscar distintos patrones a la vez concatenándolos con una `|`

```{r}
str_detect(c("5055A198-W", "50508040W", "5050505W", "50508040-W"),
           pattern = "[0-9]{8}[A-Z]|[0-9]{8}[-][A-Z]")
```


#### Contar

* [**Contar patrones**]{.hl-yellow}: con `str_count()` podemos contar cuantas veces aparece un mismo patrón

```{r}
str_count(c("abcd defg", "ab defg", "ab cd"), pattern = "[a-z]{4}")
```

#### Localizar posiciones

* [**Localizar posiciones**]{.hl-yellow}: `str_locate()` nos permite localizar la primera posición en la que se produce un patrón. Con `str_locate_all()` obtenemos todos

```{r}
str_locate(c("abcde abcd", "cba", "*a*"), pattern = "a")
str_locate_all(c("abcde abcd", "cba", "*a*"), pattern = "a")
```


#### Extraer patrones

* [**Extraer patrones**]{.hl-yellow}: con `str_extract()` podemos extraer patrones (con `str_extract_all()` todos ellos) de una cadena de texto.

```{r}
str_extract(c("DNI: 5050W", "DNI: 50558040W, DNI: 50558080-W", "DNI: 50558080-W"),
            pattern = "[0-9]{8}[A-Z]|[0-9]{8}[-][A-Z]")
str_extract_all(c("DNI: 5050W", "DNI: 50558040W, DNI: 50558080-W", "DNI: 50558080-W"),
            pattern = "[0-9]{8}[A-Z]|[0-9]{8}[-][A-Z]")
```

#### Dividir cadenas

* [**Dividir**]{.hl-yellow}: con `str_split()` podemos localizar un patrón y dividir la cadena de texto siempre que aparezca (con `str_split_fixed()` podemos dividir en un número concreto de trozos)

```{r}
str_split(c("a-b-c", "ab-c-d-e"), pattern = "-")
str_split_fixed(c("a-b-c", "ab-c-d-e"), pattern = "-", n = 2)
```
. . .

Si usamos `boundary()` como patrón podemos dividir en base a caracteres, frases, palabras, etc.

```{r}
x <- "Esto es una frase. Y esto otra."
str_split(x, boundary("word"))
str_split(x, boundary("sentence"))
```



[**Intenta realizar los siguientes ejercicios sin mirar las soluciones**]{style="color:#444442;"}
## 💻 Tu turno (textos) {#tu-turno-3-1}


El dataset será `discursos` (extraído de <https://github.com/lirondos/discursos-de-navidad>) donde están guardados los discursos navidad de los jefes de Estado de España desde 1946 hasta 2021 (en dictadura y en democracia).

```{r}
load(file = "./datos/discursos.RData")
```

::: panel-tabset

### [**Ej 1**]{.hl-yellow}

📝 Convierte todos los discurso a minúscula.

```{r}
#| code-fold: true
#| eval: false

# Convertimos a minúscula
discursos$texto <- str_to_lower(discursos$texto)
```


### [**Ej 2**]{.hl-yellow}

📝 Elimina signos de puntuación tales como ":", ",", ".", ";", "¡", "!", "¿" y "?". Tras ello elimina espacios adelante, atrás y en medio si existen solo deja uno de ellos.

```{r}
#| code-fold: true
#| eval: false

# Eliminamos los signos de puntuación
discursos$texto <-
  str_remove_all(discursos$texto, pattern = "\\:|\\,|\\.|\\;|\\¡|\\!|\\¿|\\?")

# Tras ello eliminamos espacios adelante, atrás y en medio solo dejamos uno
discursos$texto <- str_squish(discursos$texto)
```

### [**Ej 3**]{.hl-yellow}

📝 Crea una nueva variable `long` con la longitud de cada discurso

```{r}
#| code-fold: true
#| eval: false

# Eliminamos los signos de puntuación
discursos$long <- str_length(discursos$texto)
```

### [**Ej 4**]{.hl-yellow}

📝 Añade una nueva variable `n_words` con el nº palabras de cada discurso. Pista: si tras dividir cada discurso en palabras usas `length()` te devolverá seguro 76 ya que lo ha guardado en un tipo de dato llamado lista. Para calcular la longitud de cada uno de los 76 elementos de la lista usaremos `lengths()`

```{r}
#| code-fold: true
#| eval: false
lista <- list("a" = 1:2, "b" = 1:3, "c" = 1:4) # Explicación length
length(lista)
lengths(lista)
# Dividimos y aplicamos lengths
discursos$n_words <- lengths(str_split(discursos$texto, boundary("word")))
```

### [**Ej 5**]{.hl-yellow}

📝 Determina los 5 años con mayor longitud, y los 5 años con menor número de palabras

```{r}
#| code-fold: true
#| eval: false

# 5 años con mayor longitud (usamos order para obtener índices)
discursos$year[order(discursos$long, decreasing = TRUE)[1:5]]

# 5 años con menor cantidad de palabras
discursos$year[order(discursos$n_words)[1:5]]
```

### [**Ej 6**]{.hl-yellow}

📝 Incorpora una nueva variable llamada `spain` que calcule el número de veces que se dice "españoles", "españolas" o "españa" en el discurso. Determina los 5 años dónde menos se menten dichas palabras

```{r}
#| code-fold: true
#| eval: false

# Contamos
discursos$spain <- str_count(discursos$texto, pattern = "españoles|españolas|españa")

# Años con más menciones
discursos$year[order(discursos$spain, decreasing = TRUE)[1:5]]
```

### [**Ej 7**]{.hl-yellow}

📝 De los 76 años calcula el número de discursos en los que las palabras "mujer" o "mujeres" se nombren más que las palabras "hombre" u "hombres"

```{r}
#| code-fold: true
#| eval: false

sum(str_count(discursos$texto, pattern = "mujer|mujeres") >
      str_count(discursos$texto, pattern = "hombre|hombres"))
```

### [**Ej 8**]{.hl-yellow}

📝 Detecta los discursos donde aparece "cataluña", "catalanes", "catalán" o "catalanas" y quédate de la base de datos solo con aquellos que lo cumpla

```{r}
#| code-fold: true
#| eval: false

discursos[str_detect(discursos$texto, pattern = "cataluña|catalanes|catalán|catalanas"), ]
```

:::



## Primera base de datos

Cuando analizamos datos solemos tener [**varias variables**]{.hl-yellow} de cada individuo: necesitamos una «tabla» que las recopile.

### Primer intento: matrices

La opción más inmediata son las [**matrices**]{.hl-yellow}: concatenación de variables del [**mismo tipo e igual longitud**]{.hl-purple}.

Imagina que tenemos estaturas y pesos de 4 personas. ¿Cómo [**crear un dataset con las dos variables**]{.hl-yellow}?

&nbsp;

La opción más habitual es usando `cbind()`: [**concatenamos (bind) vectores en forma de columnas (c)**]{.hl-yellow}

```{r}
#| code-line-numbers: "3"
estaturas <- c(150, 160, 170, 180)
pesos <- c(63, 70, 85, 95)
datos_matriz <- cbind(estaturas, pesos)
datos_matriz
```


También podemos [**construir la matriz por filas**]{.hl-yellow} con la función `rbind()` (concatenar - bind - por filas  - rows), aunque lo [**recomendable es tener cada variable en columna**]{.hl-green} e individuo en fila como luego veremos.

```{r}
rbind(estaturas, pesos) # Construimos la matriz por filas
```

- Podemos [**«visualizar» la matriz**]{.hl-yellow} con `View(matriz)`.


-   Podemos [**comprobar las dimensiones**]{.hl-yellow} con `dim()`, `nrow()` y `ncol()`: las matrices son un tipo de **datos tabulados** (organizados en filas y columnas)

```{r}
dim(datos_matriz)
nrow(datos_matriz)
ncol(datos_matriz)
```


También podemos [**«darle vuelta» (matriz transpuesta)**]{.hl-yellow} con `t()`.

```{r}
t(datos_matriz)
```

Dado que ahora tenemos dos dimensiones en nuestros datos, para [**acceder a elementos con `[]`**]{.hl-yellow} deberemos proporcionar **dos índices separados por comas**: índice de la fila y de la columna 

```{r}
datos_matriz[2, 1] # segunda fila, primera columna
datos_matriz[1, 2] # primera fila, segunda columna 
```


En algunas casos querremos obtener los [**datos totales de un individuo**]{.hl-yellow} (una fila concreta pero todas las columnas) o los valores de [**toda una variable**]{.hl-yellow} para todos los individuos (una columna concreta pero todas las filas). Para ello dejaremos [**sin rellenar uno de los índices**]{.hl-yellow}

```{r}
datos_matriz[2, ] # segundo individuo
datos_matriz[, 1] # primera variable
```


Mucho de lo aprendido con vectores podemos hacerlo con matrices, así podemos por ejemplo acceder a varias filas y/o columnas haciendo uso de las [**secuencias de enteros 1:n**]{.hl-yellow}

```{r}
datos_matriz[c(1, 3), 1] # primera variable para el primer y tercer individuo
```


También podemos definir una [**matriz a partir de un vector numérico**]{.hl-yellow}, reorganizando los valores en forma de matriz (sabiendo que los elementos se van [**colocando por columnas**]{.hl-purple}).

```{r}
z <- matrix(1:9, ncol = 3) 
z
```

Incluso podemos [**definir una matriz de valores constantes**]{.hl-yellow}, por ejemplo de ceros (para luego rellenar)

```{r}
matrix(0, nrow = 2, ncol = 3)
```



#### Operaciones con matrices

Con las matrices sucede como con los vectores: cuando aplicamos una [**operación aritmética lo hacemos elemento a elemento**]{.hl-yellow}

```{r}
z/5
```



Para realizar [**operaciones en un sentido matricial**]{.hl-yellow} deberemos añadir `%%`, por ejemplo, para multiplicar matrices será `%*%`


```{r}
z * t(z)
z %*% t(z)
```


También podemos [**realizar operaciones por columnas/filas**]{.hl-yellow} sin recurrir a bucles con la función `apply()`, y le indicaremos como **argumentos**

-   la matriz
-   el sentido de la operación (`MARGIN = 1` por filas, `MARGIN = 2` por columnas)
-   la función a aplicar
- argumentos extra que necesite la función

Por ejemplo, para aplicar una media a cada variable, será `mean` aplicada con `MARGIN = 2` (misma función para cada columna)

```{r}
# Media (mean) por columnas (MARGIN = 2)
apply(datos_matriz, MARGIN = 2, FUN = "mean")
```


### 💻 Tu turno (matrices) {#tu-turno-3-2}

[**Intenta realizar los siguientes ejercicios sin mirar las soluciones**]{style="color:#444442;"}

::: panel-tabset

### [**Ejercicio 1**]{.hl-yellow}

📝 Modifica el código inferior para definir una matriz `x` de unos, de 3 filas y 7 columnas.

```{r}
#| eval: false
x <- matrix(0, nrow = 2, ncol = 3)
x
```

```{r}
#| code-fold: true
#| eval: false
x <- matrix(1, nrow = 3, ncol = 7)
x
```

### [**Ejercicio 2**]{.hl-yellow}

📝 A la matriz anterior, suma un 1 a cada número de la matriz y divide el resultado entre 5. Tras ello calcula su transpuesta

```{r}
#| code-fold: true
#| eval: false
new_matrix <- (x + 1)/5
t(new_matrix)
```

### [**Ejercicio 3**]{.hl-yellow}

📝 ¿Por qué el código inferior nos devuelve dicho mensaje de aviso?

```{r}
#| warning: TRUE
matrix(1:15, nrow = 4)
```



### [**Ejercicio 4**]{.hl-yellow}

📝 Define la matriz `x <- matrix(1:12, nrow = 4)`. Tras ello obtén los datos del primer individuo, los datos de la tercera variable, y el elemento `(4, 1)`.

```{r}
#| code-fold: true
#| eval: false
x <- matrix(1:12, nrow = 4)
x[1, ] # primera fila
x[, 3] # tercera columna
x[4, 1] # elemento (4, 1)
```

### [**Ejercicio 5**]{.hl-yellow}

📝 Define una matriz de 2 variables y 3 individuos tal que cada variable capture la estatura y la edad 3 personas, de manera que la edad de la segunda persona sea desconocida (ausente). Tras ello calcula la media de cada variable (¡nos debe de volver un número!)

```{r}
#| code-fold: true
#| eval: false
datos <- cbind("edad" = c(20, NA, 25), "estatura" = c(160, 165, 170))
apply(datos, MARGIN = 2, FUN = "mean", na.rm = TRUE) # media por columnas

```

### [**Ejercicio 6**]{.hl-yellow}

📝 ¿Por qué devuelve error el código inferior? ¿Qué está mal?

```{r}
#| error: true
matriz <- cbind("edad" = c(15, 20, 25), "nombres" = c("javi", "sandra", "carlos"))
matriz
matriz + 1
```

:::

### Segundo intento: data.frame

Las matrices tienen el mismo problema que los vectores: si juntamos datos de distinto tipo, se [**perturba la integridad del dato**]{.hl-red} ya que los convierte (fíjate en el código inferior: las edades y los `TRUE/FALSE` los ha convertido a texto)

```{r}
#| code-line-numbers: "4-5"
edades <- c(14, 24, NA)
soltero <- c(TRUE, NA, FALSE)
nombres <- c("javi", "laura", "lucía")
matriz <- cbind(edades, soltero, nombres)
matriz
```

De hecho al no ser números ya no podemos realizar operaciones aritméticas

```{r}
#| error: true
matriz + 1
```

Para poder trabajar con [**variables de distinto tipo**]{.hl-yellow} tenemos en `R` lo que se conoce como [**data.frame**]{.hl-yellow}: concatenación de variables de igual longitud pero que pueden ser de [**tipo distinto**]{.hl-purple}.

```{r}
tabla <- data.frame(edades, soltero, nombres)
class(tabla)
tabla
```

Dado que un `data.frame` es ya un intento de «base de datos» las variables no son meros vectores matemáticos: [**tienen un significado**]{.hl-yellow} y podemos (debemos) [**ponerles nombres**]{.hl-purple} que describan su significado

```{r}
library(lubridate)
tabla <-
  data.frame("edad" = edades, "estado" = soltero, "nombre" = nombres,
             "f_nacimiento" = as_date(c("1989-09-10", "1992-04-01", "1980-11-27")))
tabla
```


[**¡TENEMOS NUESTRO PRIMER CONJUNTO DE DATOS!**]{.hl-yellow} (estrictamente no podemos hablar de base de datos pero de momento como lo si fuesen). Puedes visualizarlo escribiendo su nombre en consola o con `View(tabla)`

![](img/view_tabla.jpg)


#### Acceso a variables

Si queremos acceder a sus elementos, al ser de nuevo **datos tabulados**, podemos acceder como en las matrices ([**no recomendable**]{.hl-red}): de nuevo [**tenemos dos índices**]{.hl-yellow} (filas y columnas, dejando libre la que no usemos)

```{r}
tabla[2, ]  # segunda fila (todas sus variables)
tabla[, 3]  # tercera columna (de todos los individuos)
tabla[2, 1]  # primera característica de la segunda persona
```


::: columns
::: {.column width="25%"}
![](img/menu_data_frame.jpg)
:::

::: {.column width="75%"}
Pero también tiene las ventajas de una [**«base» de datos**]{.hl-yellow} : podemos [**aceder a las variables por su nombre**]{.hl-purple} ([**lo recomendable**]{.hl-green} ya que las variables pueden cambiar de posición y ahora sí tienen un significado), poniendo el nombre de la tabla seguido del símbolo `$` (con el **tabulador**, nos aparecerá un menú de columnas a elegir)
:::
:::


#### Funciones de consulta

-   `names()`: nos muestra los nombres de las variables

```{r}
names(tabla)
```


-   `dim()`: nos muestra las dimensiones (también `nrow()` y `ncol()`)

```{r}
dim(tabla)
```


-   Podemos acceder a las variables por su nombre

```{r}
tabla[c(1, 3), "nombre"]
tabla$nombre[c(1, 3)]
```



#### Añadir variable

Si tenemos uno ya creado y queremos [**añadir una columna**]{.hl-yellow} es tan simple como usar la función `data.frame()` que ya hemos visto para concatenar la columna. Vamos añadir por ejemplo una nueva variable, el número de hermanos de cada individuo.

```{r}
# Añadimos una nueva columna con nº de hermanos/as
hermanos <- c(0, 2, 3)
tabla <- data.frame(tabla, "n_hermanos" = hermanos)
tabla
```



### Intento final: tibble

Las tablas en formato `data.frame` tienen algunas [**limitaciones**]{.hl-red}. La principal es que [**no permite la recursividad**]{.hl-red}: imagina que definimos una base de datos con estaturas y pesos, y queremos una tercera variable con el IMC

```{r}
#| error: true
data.frame("estatura" = c(1.7, 1.8, 1.6), "peso" = c(80, 75, 70),
           "IMC" = peso / (estatura^2))
```


En adelante usaremos el formato `tibble` ([**data.frame mejorado**]{.hl-yellow}) del paquete `{tibble}`

```{r}
library(tibble)
datos_tb <- 
  tibble("estatura" = c(1.7, 1.8, 1.6), "peso" = c(80, 75, 70), "IMC" = peso / (estatura^2))
class(datos_tb)
datos_tb
```


```{r}
datos_tb <-
  tibble("estatura" = c(1.7, 1.8, 1.6), "peso" = c(80, 75, 70), "IMC" = peso / (estatura^2))
datos_tb
```

Las tablas en formato `tibble` nos permitirá una [**gestión más ágil, eficiente y coherente**]{.hl-yellow} de los datos, con 4 ventajas principales:

-   [**Metainformación**]{.hl-yellow}: si te fijas en la cabecera, nos dice ya automáticamente el número de filas y columnas, y el tipo de cada variable


-   [**Recursividad**]{.hl-yellow}: permite definir las variables secuencialmente (como hemos visto)


-   [**Consistencia**]{.hl-yellow}: si accedes a una columna que no existe avisa con un warning

```{r}
#| warning: true
datos_tb$invent
```

-   [**Por filas**]{.hl-yellow}: crear por filas (copiar y pegar de una tabla) con `tribble()`

```{r}
tribble(~colA, ~colB,
        "a",   1,
        "b",   2)
```



::: callout-tip
El paquete `{datapasta}` nos permite [**copiar y pegar**]{.hl-green} tablas de páginas web y documentos sencillos
:::

### 💻 Tu turno (tb/df) {#tu-turno-3-3}

[**Intenta realizar los siguientes ejercicios sin mirar las soluciones**]{style="color:#444442;"}

::: panel-tabset

### [**Ejercicio 1**]{.hl-yellow}

📝 Carga del paquete `{datasets}` el conjunto de datos `airquality` (variables de la calidad del aire de Nueva York desde mayo hasta septiembre de 1973). ¿Es el conjunto de datos airquality de tipo tibble? En caso negativo, conviértelo a tibble (busca en la documentación del paquete en <https://tibble.tidyverse.org/index.html>).

```{r}
#| code-fold: true
#| eval: false
library(tibble)
class(datasets::airquality)
airquality_tb <- as_tibble(datasets::airquality)
```

### [**Ejercicio 2**]{.hl-yellow}

📝 Una vez convertido a `tibble` obtén el nombre de las variables y las dimensiones del conjunto de datos. ¿Cuántas variables hay? ¿Cuántos días se han medido?

```{r}
#| code-fold: true
#| eval: false
names(airquality_tb)
ncol(airquality_tb)
nrow(airquality_tb)
```


### [**Ejercicio 3**]{.hl-yellow}

📝 Filtra solo los datos de la quinta observación

```{r}
#| code-fold: true
#| eval: false
airquality_tb[Month == 8, ]
```

### [**Ejercicio 4**]{.hl-yellow}

📝 Filtra solo los datos del mes de agosto. ¿Cómo indicarle que queremos solo las filas que cumplan una condición concreta? (pista: en realidad todo son vectores "formateados")

```{r}
#| code-fold: true
#| eval: false
airquality_tb[Month == 8, ]
```

### [**Ejercicio 5**]{.hl-yellow}

📝 Selecciona aquellos datos que no sean ni de julio ni de agosto.

```{r}
#| code-fold: true
#| eval: false
airquality_tb[Month != 7 & Month != 8, ]
airquality_tb[!(Month %in% c(7, 8)), ]
```

### [**Ejercicio 6**]{.hl-yellow}

📝 Modifica el siguiente código para quedarte solo con las variable de ozono y temperatura (sin importar qué posición ocupen)

```{r}
#| eval: false
airquality_tb[, 3]
```

### [**Ejercicio 7**]{.hl-yellow}

📝 Selecciona los datos de temperatura y viento de agosto. 

```{r}
#| code-fold: true
#| eval: false
airquality_tb[Month == 8, c("Temp", "Wind")]
```

### [**Ejercicio 8**]{.hl-yellow}

📝 Traduce a castellano el nombre de las variables.


```{r}
#| code-fold: true
#| eval: false
names(airquality_tb) <- c("ozono", "rad_solar", "viento", "temp", "mes", "dia") 
```

:::



## 🐣 Caso práctico I: salto de longitud

Para practicar textos y tibbles vamos a usar el dataset `salto_longitud.csv` que tienes guardado en la carpeta de datos, que guarda cómo ha **progresado el récord de salto de longitud masculino**. Dicha tabla ha sido extraída directamente de la wikipedia <https://en.wikipedia.org/wiki/Men%27s_long_jump_world_record_progression#Low_altitude_record_progression_1965%E2%80%931991>

![](./img/men-long-jump.png)

```{r}
load(file = "./datos/salto_longitud.RData")
```

Aunque más adelante veremos como extraerlo, puedes ver debajo si quieres el código que se ha usado para extraer la tabla

```{r}
#| code-fold: true
#| eval: false
library(rvest)
library(tidyverse)
wiki_jump <- 'https://en.wikipedia.org/wiki/Men%27s_long_jump_world_record_progression'
long_jump <- read_html(wiki_jump)
salto_longitud <- html_table(html_node(long_jump, 'table'))
```



### Pregunta 1

> ¿Cuántos registros hay? ¿Cuántas variables? ¿De qué tipo es cada una? ¿Cuáles son sus nombres? ¿Qué crees que significan?


```{r}
#| code-fold: true
#| eval: false
nrow(salto_longitud)
ncol(salto_longitud)
names(salto_longitud)

# tenemos 19 récords y 5 variables: la marca (en metros, pies y pulgadas), el viento que hacía, la persona que batió el record, el lugar y la fecha.
```



### Pregunta 2

> Crea una nueva variable llamada `Mark` (sustituye a la anterior) en la que hayas extraído la marca en metros (y convertida a número). Práctica antes con un valor de juguete, por ejemplo, si tuviésemos `x <- "7.61 m (24 ft 11+1/2 in)", ¿cómo podríamos quedarnos solo con la marca en metros?


```{r}
#| code-fold: true
#| eval: false

# Sabemos que el patrón es 1 número, un ., y dos decimales, así que
# usamos str_extract para extraer ese patrón que le indicamos
# con una expresión regular.
salto_longitud$Mark <-
  str_extract(salto_longitud$Mark, pattern = "[0-9][.][0-9]{2}")

# Tras ello convertimos a número
salto_longitud$Mark <- as.numeric(salto_longitud$Mark)

# importante: ahora en la cabecera debajo de mark pone <dbl>, es un número
salto_longitud 
```

### Pregunta 3

> Crea una nueva variable llamada `Wind` (sustituye la original) en la que tengas el viento convertido a número. 


```{r}
#| code-fold: true
#| eval: false
salto_longitud$Wind <- as.numeric(salto_longitud$Wind)
salto_longitud
```

> ¿En cuántos récords no había viento? ¿En cuántos no tenemos registros de dicha medida?

```{r}
#| code-fold: true
#| eval: false

# Con viento 0
sum(salto_longitud$Wind == 0, na.rm = TRUE)

# Sin registros
sum(is.na(salto_longitud$Wind))

# importante: ausente y 0 no es lo mismo
```

### Pregunta 4

> Crea una nueva variable llamada `country` que extraiga las siglas de los países de la variable `Athlete`

```{r}
#| code-fold: true
#| eval: false
# Primero extraemos con los paréntesis (es más fácil detectarlo)
salto_longitud$country <-
  str_extract(salto_longitud$Athlete, pattern = "[(][A-Z]{3}[)]")

# Luego los eliminamos los ( y los ) (de ahí la barra vertical en medio)
# Fíjate que para que entienda que es un caracter especial (paréntesis)
# se lo pasamos como \\( y como \\). Ppasaría lo mismo si queremos detectar,
# por ejemplo, un punto, con \\.
salto_longitud$country <- str_remove_all(salto_longitud$country, "\\(|\\)")
```



### Pregunta 5

> Ordena la tabla por orden alfabético de las siglas

```{r}
#| code-fold: true
#| eval: false
salto_longitud <- salto_longitud[order(salto_longitud$country), ]
```

### Pregunta 6

> Reemplaza la variable `Date` por la fecha correcta en formato fecha


```{r}
#| code-fold: true
#| eval: false

# primero eliminamos todos los [?]
salto_longitud$Date <-
  str_remove_all(salto_longitud$Date, pattern = "\\[[0-9]{1}\\]")

# luego atendemos el caso particualr de [note 1]
salto_longitud$Date <-
  str_remove_all(salto_longitud$Date, pattern = "\\[note 1\\]")

# tras depurar convertimos a fecha
salto_longitud$Date <- dmy(salto_longitud$Date)
salto_longitud
```

### Pregunta 7

> ¿Cuántos récords no son de Estados Unidos? ¿Qué porcentaje representa respecto al total?

```{r}
#| code-fold: true
#| eval: false

# total absoluto
sum(salto_longitud$country == "USA")

# porcentaje relativo
100*sum(salto_longitud$country == "USA") / length(salto_longitud$country)
```


### Pregunta 8

> Para cada récord, calcula los metros de mejora respecto al anterior, y guárdalo en la base de datos. Pista: prueba bien la función `diff()` y chequea la longitud de lo que te devuelve.

```{r}
#| code-fold: true
#| eval: false

# Usamos la función diff que, dado un vector, calcula las diferencias
# fíjate que el primero no conocemos la mejora (ya que no hay registro previo)
salto_longitud$mejora <- c(NA, diff(salto_longitud$Mark))
```


## 🐣 Caso práctico II: pinniped dataset

Del paquete `{Biostatistics}` usaremos el conunto de datos `pinniped`, que guarda los datos de peso de cuerpo y cerebro (desagregado por sexo y mono/poligamia) de 33 especies de mamíferos marinos.


```{r}
Biostatistics::pinniped
```

### Pregunta 1

> Comprueba si los datos están en formato tibble. En caso negativo conviértelo.

```{r}
#| eval: false
#| code-fold: true

# chequeamos si es tibble
library(tibble)
is_tibble(Biostatistics::pinniped)

# Convertimos a tibble
pinniped_tb <- as_tibble(Biostatistics::pinniped)
```

### Pregunta 2

> ¿Cuántos registros hay? ¿Cuántas variables? ¿De qué tipo es cada una? ¿Cuáles son sus nombres?


```{r}
#| code-fold: true
#| eval: false
nrow(pinniped_tb)
ncol(pinniped_tb)
names(pinniped_tb)
```

### Pregunta 3

> Incorpora una variable nueva llamada `phoca` que sea de tipo lógico y que nos diga si una especie es de la categoría `Phoca` o no.

```{r}
#| code-fold: true
#| eval: false
pinniped_tb$phoca <- pinniped_tb$Species == "Phoca"
```

### Pregunta 4

> ¿A qué sexo le pesa más el cerebro: a las hembras o a los machos?

```{r}
#| code-fold: true
#| eval: false

# ¿a quién le pesa más el cerebro?
mean(pinniped_tb$Male_brain_g, na.rm = TRUE) >
  mean(pinniped_tb$Female_brain_g, na.rm = TRUE)
```

### Pregunta 5

> ¿A quienes les pesa más el cuerpo a los monógamos o a los polígamos? Recuerda que tienes los pesos divididos por sexos en variables distintas que tendrás que juntar de alguna forma

```{r}
#| code-fold: true
#| eval: false

# ¿a quién le pesa más el cerebro?
mean(c(pinniped_tb$Male_mass_Kg[pinniped_tb$Mate_type == "mono"],
       pinniped_tb$Female_mass_Kg[pinniped_tb$Mate_type == "mono"])) >
  mean(c(pinniped_tb$Male_mass_Kg[pinniped_tb$Mate_type == "poly"],
         pinniped_tb$Female_mass_Kg[pinniped_tb$Mate_type == "poly"]))
```


### Pregunta 6

> Incopora una nueva variable llamada `dif_m_f` que represente la diferencia entre el peso del cerebro entre machos y hembras (machos - hembras) para cada especie.

```{r}
#| code-fold: true
#| eval: false
pinniped_tb$dif_m_f <- pinniped_tb$Male_brain_g - pinniped_tb$Female_brain_g
pinniped_tb
```


