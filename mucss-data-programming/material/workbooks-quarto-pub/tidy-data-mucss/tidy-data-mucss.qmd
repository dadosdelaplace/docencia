---
title: "Introduction to tidyverse: tidy data"
subtitle: "Practical workbooks of Data Programming in Master in Computational Social Science  (2024-2025)"
author: "Javier Álvarez Liébana"
format:
  html:
    theme: [default, style.scss]
    toc: true
    toc-title: Índice
    toc-depth: 5
    toc-location: left
    number-sections: true
embed-resources: true
execute: 
  echo: true
---

```{r}
#| echo: false
setwd(dir = getwd())
```

## Introduction to tidy data

As commented, our [**final database format**]{.hl-yellow} will be the `tibble` type object, an enhanced `data.frame`.

```{r}
library(tibble)
tibble("height" = c(1.7, 1.8, 1.6), "weight" = c(80, 75, 70), "BMI" = weight / (height^2))
```

- [**Metainformation**]{.hl-yellow}: in the header it automatically tells us the number of rows and columns, and the type of each variable.

- [**Recursivity**]{.hl-yellow}: allows to define the variables sequentially (as we have seen).

- [**Consistency**]{.hl-yellow}: if you access a column that does not exist it warns you with a warning.

- [**By rows**]{.hl-yellow}: allows to create by rows with `tribble()`.


### R base vs Tidyverse

So far, everything we have done in `R` has been done in the programming paradigm known as [**R base**]{.hl-yellow}. When `R` was born as a language, many of those who programmed in it imitated forms and methodologies inherited from other languages, based on the use of

- Loops [**for**]{.hl-yellow} and [**while**]{.hl-yellow}

- Dollar `$` to access to the variables 

- Structures [**if-else**]{.hl-yellow}

And although knowing these structures can be interesting in some cases, in [**most cases they are obsolete and we will be able to avoid them**]{.hl-red} (especially loops) since `R` is specially [**designed to work in a functional way**]{.hl-yellow} (instead of element-by-element).


&nbsp;

In this context of functional programming, a decade ago `{tidyverse}` was born, a [**“universe” of packages**]{.hl-yellow} to guarantee an efficient, coherent and lexicographically simple to understand workflow, based on the idea that [**our data is clean and tidy**]{.hl-purple}.


![](img/tidyverrse_universe.jpg)

![](img/flow_tidyverse.jpg)


- `{tibble}`: [**optimizing data.frame**]{.hl-yellow}
- `{tidyr}`: [**data cleaning**]{.hl-yellow}
- `{readr}`: load rectangular data (.csv), `{readxl}`: import .xls and .xlsx files
- `{dplyr}`: grammar for debugging
- `{stringr}`: text handling
- `{purrr}`: list handling
- `{forcats}`: qualitative handling
- `{ggplot2}`: data visualization
- `{lubridate}`: date management
- `{rvest}`: web scraping
- `{tidymodels}`: modeling/prediction



### Basic idea: tidy data

> Tidy datasets are all alike, but every messy dataset is messy in its own way (Hadley Wickham, Chief Scientist en RStudio)

::: {style="font-size:120px; text-align: center; color:#F8DF58;"}
<b>TIDY</b><b>[VERSE</b>]{style="color:#CAB0EE;"}
:::

The [**universe**]{.hl-purple} of `{tidyverse}` packages is based on the idea introduced by **Hadley Wickham** (the God we pray to) of [**standardizing**]{.hl-yellow} the format of data to


- [**systematize**]{.hl-green} debugging
- make it easier [**simpler**]{.hl-green} to manipulate
- [**legible**]{.hl-green} code.
:::


#### Rules in the tidy universe

The first thing will therefore be to understand what the [**tidydata sets**]{.hl-yellow} are, since the whole `{tidyverse}` is based on the data being standardized.

1.  Each [**variable**]{.hl-yellow} in a [**single column**]{.hl-purple}
2.  Each [**individual**]{.hl-yellow} in a [**different row**]{.hl-purple}
3.  Each [**cell**]{.hl-yellow} with a [**single value**]{.hl-purple}
4.  Each [**dataset**]{.hl-yellow} in a [**tibble**]{.hl-purple}
5.  If we want to join [**multiple datasets**]{.hl-yellow} we must have a [**common (key) column**]{.hl-purple}.

![](img/tidy_def.jpg){width="160%"}


#### Pipe

In `{tidyverse}` the [**operator pipe (pipe)**]{.hl-yellow} defined as `|>` ([**ctrl+shift+M**]{.hl-purple}) will be key: it will be a [**pipe that traverses the data**]{.hl-yellow} and transforms it.

In R base, if we want to apply three functions `first()`, `second()` and `third()` in order, it would be

```{r}
#| eval: false
third(second(first(data)))
```



In `{tidyverse}` we can [**read from left to right**]{.hl-yellow} and separate data from the actions

```{r}
#| eval: false
data |> first() |> second() |> third()
```

::: callout-caution
## Important

Since version 4.1.0 of `R` we have `|>`, a **native** pipe available [**outside tidyverse**]{.hl-purple}, replacing the [**old pipe**]{.hl-red} `%>%` which depended on the `{magrittr}` package (quite problematic).

:::



The main advantage is that the [**code is very readable (almost literal)**]{.hl-yellow} and you can do large operations on the data with very little code.

```{r}
#| eval: false
data |>
  tidy(...) |>
  filter(...) |>
  select(...) |>
  arrange(...) |>
  modify(...) |>
  rename(...) |>
  group(...) |>
  count(...) |>
  summarise(...) |>
  plot(...)
```

<center><img src="img/logo_pipe.png" width="360px"/></center>

### Messy data: examples

#### pivot_longer()

But what does the [**non-tidy (messy) data**]{.hl-yellow} look like? Let's load the `table4a` table from the `{tidyr}` package (we already have it loaded from the `{tidyverse}` environment).


```{r}
library(tidyr)
table4a
```


[**What could be wrong?**]{.hl-red}

&nbsp;

❎ Each [**row represents two observations**]{.hl-red} (1999 and 2000) → the columns `1999` and `2000` should actually themselves be [**values of a variable**]{.hl-yellow} and not column names.

&nbsp;

We will include a [**new column**]{.hl-yellow} that stores the year and another one that stores the value of the variable of interest in each of those years. And we will do it with the `pivot_longer()` function: [**pivot the table**]{.hl-yellow} to long format:

```{r}
table4a |> 
  pivot_longer(cols = c("1999", "2000"), names_to = "year", values_to = "cases")
```


![](img/table4a.jpg)


- `cols`: [**name of the variables to pivot**]{.hl-yellow}.
- `names_to`: name of the new variable to which we send the [**header**]{.hl-yellow} of the table (the names).
- `values_to`: name of the new variable to which we are going to send the [**data**]{.hl-yellow}.



#### pivot_wider()

Let's see another example with table `table2`.

```{r}
table2
```


[**What could be wrong?**]{.hl-red}

&nbsp;


❎ Each [**observation is divided into two rows**]{.hl-red} → the [**records with the same year should be the same**]{.hl-yellow}

&nbsp;

What we will do will be the opposite: with `pivot_wider()` [**we will widen the table**]{.hl-yellow}

```{r}
table2 |>  pivot_wider(names_from = type, values_from = count)
```

#### separate()

Let's see another example with table `table3`.

```{r}
table3
```

&nbsp;

[**What could be wrong?**]{.hl-red}

&nbsp;

❎ Each [**cell contains several values**]{.hl-red}

&nbsp;

What we will do is make use of the `separate()` function to send [**separate each value**]{.hl-yellow} to a different column.


```{r}
table3 |> separate(rate, into = c("cases", "pop"))
```


Notice that the data, although it has separated them, [**kept them as text**]{.hl-red} when in fact they should be numeric variables. For this we can add the optional argument `convert = TRUE`.


```{r}
table3 |> separate(rate, into = c("cases", "pop"), convert = TRUE)
```

#### unite()

Let's see the last example with table `table5`.

```{r}
table5
```

&nbsp;

[**What could be wrong?**]{.hl-red}

&nbsp;

❎ We have [**same values divided in two columns**]{.hl-red}

&nbsp;

We will use `unite()` to [**unite the values**]{.hl-yellow} of century and year in the same column

```{r}
table5 |> unite(col = whole_year, century, year, sep = "")
```

### Nest data

We can also [**nest datasets inside another one**]{.hl-yellow}: imagine we have a dataset with variables `x` and `y`, with two records, another with one and another with 3 of them.

```{r}
data <-
  tibble("dataset" = c(1, 1, 2, 3, 3, 3), 
         "x" = c(0, 2, NA, -2, 6, 7),
         "y" = c(-1, NA, 5, 1.5, NA, -2))
data
```

Everything that has an equal value in `dataset` should form its own `tibble` so let's create one inside the one we have

&nbsp;

For it we will use the function `nest()` indicating it which variables form the datasets that will be nested (in this case variables `x` and `y`). Notice that inside what it stores is a variable of type list (since each dataset has a different length).

```{r}
data_nest <-
  data |>
  nest(data = c(x, y))
data_nest
```

To **unnest** just use the `unnest()` function indicating the column to unnest.

```{r}
data_nest |> unnest(cols = c(data))
```


### Example: world bank pop

In the `{tidyr}` package we have the `world_bank_pop` dataset which contains data from the World Bank about population per country from 2000 to 2018.

```{r}
library(tidyr)
world_bank_pop
```

&nbsp;

[**What could be wrong?**]{.hl-red}

&nbsp;

First of all, we can see that we effectively have the same variable in 18 columns: population. What we should have is a column called `pop` with these values and another `year` indicating to which year corresponds the measurement. And for this we will do it with `pivot_longer()`.

```{r}
world_bank_pop_tidy <-
  world_bank_pop |> 
  pivot_longer(cols = -(country:indicator), names_to = "year", values_to = "value")
world_bank_pop_tidy
```


```{r}
world_bank_pop_tidy
```

&nbsp;

[**Is everything correct?**]{.hl-red}

&nbsp;

If you notice we have two types of population measures, total `...TOTL` and its growth `...GROW`, but in addition we have them for each country in global `SP.POP...` and only in urban area `SP.URB...`.

```{r}
unique(world_bank_pop_tidy$indicator)
```

&nbsp;

What should be done?

&nbsp;

We will separate this variable into 3: one for the prefix `SP` (which we will eliminate later), one for the area (`POP/URB`) and one for the value (`variable`), which can be total or growth.

```{r}
world_bank_pop_tidy2 <-
  world_bank_pop_tidy |>
  separate(indicator, c("dummy", "area", "variable"))
world_bank_pop_tidy2$dummy <- NULL
world_bank_pop_tidy2
```


This can be done in a simpler way by indicating in the variable that we want to eliminate that it is `NA` inside `separate()`.

```{r}
world_bank_pop_tidy <-
  world_bank_pop_tidy |>
  separate(indicator, c(NA, "area", "variable"))
world_bank_pop_tidy
```

&nbsp;

Have we got it yet? **Think carefully: does each variable have its own column?**

&nbsp;

If you actually look at the total population and growth variables, they should be different variables, since they even have different units: one is inhabitants, the other is percentage points. To do the reverse of the initial operation, `pivot_wider()` (later we will use a tremendously useful function, `{janitor}`'s `clean_names()` which unifies variable names).

```{r}
world_bank_pop_tidy <-
  world_bank_pop_tidy |>
  pivot_wider(names_from = "variable", values_from = "value") |> 
  janitor::clean_names()
world_bank_pop_tidy
```

&nbsp;

The complete code would be this: [**short, concise, readable and self-descriptive**]{.hl-yellow}.

```{r}
world_bank_pop_tidy <-
  world_bank_pop |> 
  pivot_longer(cols = -(country:indicator), names_to = "year", values_to = "value") |> 
  separate(indicator, c(NA, "area", "variable")) |> 
  pivot_wider(names_from = "variable", values_from = "value") |> 
  janitor::clean_names()
world_bank_pop_tidy
```


### Example: who dataset

In`{tidyr}` package we have `who2` dataset (World Health Organization dataset)

```{r}
library(tidyr)
who2
```

&nbsp;

**Is it tidy data? Why?**

&nbsp;

First step for tidy data: we must pivot the table (tip: use paper and pen to sketch how the database should look like) so that there is a column called `cases` (since all columns starting from `year` is actually the same, cases of a disease).


```{r}
who_tidy <-
  who2 |> 
  pivot_longer(cols = -(country:year), names_to = "type", values_to = "cases")
who_tidy
```


If you notice there are a lot of rows that do not make sense to keep because we have no cases! Investigate the `pivot_longer()` options to see how we can directly remove them in the pivot.


```{r}
who_tidy <-
  who2 |> 
  pivot_longer(cols = -(country:year), names_to = "type", values_to = "cases",
               values_drop_na = TRUE)
who_tidy
```



Now in `type` we have coded the information as `diagnosis_sex_age`. How to separate it in 3 columns? Investigate both `separate()` and `pivot_longer()` options.

```{r}
# separate
who_tidy <-
  who_tidy |> 
  separate(col = "type", into = c("diagnosis", "sex", "age"))

# pivot_longer
who_tidy <-
  who2 |> 
  pivot_longer(cols = -(country:year), names_to = c("diagnosis", "sex", "age"),
               values_to = "cases", values_drop_na = TRUE,
               names_sep = "_")
who_tidy
```
 

Finally, separate in two (`age_inf`, `age_sup`) the age range (which are numbers). Think about how to do it since it is not always 4 numbers (if there is no upper age range defined, put `Inf` as an upper bound).


```{r}
library(dplyr)
who_tidy <-
  who_tidy |> 
  separate(col = "age", into = c("age_inf", "age_sup"), sep = -2, convert = TRUE)
who_tidy$age_inf <- if_else(is.na(who_tidy$age_inf), 65, who_tidy$age_inf)
who_tidy$age_sup <- if_else(who_tidy$age_sup == 65, Inf, who_tidy$age_sup)
who_tidy
```


### 💻 It's your turn

[**Try to perform the following exercises without looking at the solutions**]{style="color:#444442;"}

::: panel-tabset

### [**Exercise 1**]{.hl-yellow}


📝 Use the original `who2` dataset from the `{tidyr}` package and try to answer the question: how many cases of tuberculosis were there in Spain in 1995 among women? Do it without converting it to tidydata. After that, pivot in a simple way and compare the code to be done when we have tidydata to when we don't. Which one is more readable if you didn't know `R`? Which one has higher error probability?

```{r}
#| code-fold: true
#| eval: false

# messy data
sum(who2[who2$country == "Spain" & who2$year == 1995,
     names(who2)[str_detect(names(who2), "f_")]], na.rm = TRUE)

# tidy data (at this moment)
sum(who_tidy[who_tidy$country == "Spain" &
           who_tidy$year == 1995 &
           who_tidy$sex == "f", ]$cases)

# in the future
who_tidy |> 
  filter(country == "Spain" & year == 1995 & sex == "f") |> 
  summarise(sum(cases))
```


### [**Exercise 2**]{.hl-yellow}

📝 Using `who_tidy` determine which sex has had more cases, men or women? Create a new variable `avg_age` (mean age of the interval): if the range is 25 to 34, the mean age will be $(25 + 34)/2 = 29.5$ (if `Inf` above, `NA`)

```{r}
#| code-fold: true
#| eval: false

# f vs m
sum(who_tidy[who_tidy$sex == "m", ]$cases)
sum(who_tidy[who_tidy$sex == "f", ]$cases)

# ave age
who_tidy$ave_age <- 
  if_else(is.infinite(who_tidy$age_sup), NA, (who_tidy$age_inf + who_tidy$age_sup)/2)
```


### [**Exercise 3**]{.hl-yellow}

📝 If we must choose a country in which we have the lowest probability of infection, which country, between the United Kingdom (`United Kingdom of Great Britain and Northern Ireland`) and France (similar population), had the fewest cases in the most recent year (whichever it was, even if the table was updated)?

```{r}
#| code-fold: true
#| eval: false

last_cases <- who_tidy[who_tidy$year == max(who_tidy$year), ]
sum(last_cases[last_cases$country == "United Kingdom of Great Britain and Northern Ireland", "cases"])
sum(last_cases[last_cases$country == "France", "cases"])
# better France
```


### [**Exercise 4**]{.hl-yellow}

📝 Take a look at table `table4b` in package `{tidyr}`. Is it tidydata? If not, what is wrong, how to convert it to tidy data in case it is not already?

```{r}
#| code-fold: true
#| eval: false
table4b |>
  pivot_longer(cols = "1999":"2000", names_to = "year",
               values_to = "cases")
```


### [**Exercise 5**]{.hl-yellow}

📝 Take a look at the `billboard` table in the `{tidyr}` package. Is it tidydata? If not, what is wrong, how to convert it to tidy data in case it is not already?

```{r}
#| code-fold: true
#| eval: false
billboard |>
  pivot_longer(cols = "wk1":"wk76",
               names_to = "week",
               names_prefix = "wk",
               values_to = "position",
               values_drop_na = TRUE)
```

:::



## 🐣 Case study: religion income

Let's perform a case study with the `relig_income` table of the `{tidyr}` package. As indicated in the `? relig_income` help, the table represents the number of people in each annual income bracket (20k = 20 000$) and in each religion.


```{r}
library(tidyr)
relig_income
```

### Question 1

> Is it tidy data? Why?

```{r}
#| eval: false
#| code-fold: true

# It is not since we should really only have one variable of
# income and we have it divided into 11: all of them is the same variable only
# it takes on a different value.
```


### Question 2

> How to convert it to tidy data? Do whatever you consider to end up with a three column table: religion, income and people

```{r}
#| code-fold: true
#| eval: false

# The idea is to pivot all the income columns
# We will make the table longer and less wide so....
relig_tidy <-
  relig_income |>
  pivot_longer(cols = "<$10k":"Don't know/refused", names_to = "income",
               values_to = "people")
relig_tidy 
```

### Question 3

> Using the tidy table above, separate the `income` variable into two, the lower and upper income limits (`income_inf` and `income_sup`).

```{r}
#| code-fold: true
#| eval: false
relig_tidy |>
  separate(income, into = c("income_inf", "income_sup"), sep = "-")
```

### Question 4

> If you look at the first column the `“$10k”` should be an upper dimension, not a lower one. How do you tell it to separate that case?

```{r}
#| code-fold: true
#| eval: false

# We will prompt you to separate whether you find `“-”` or `“<”`
# (we use `|` to separate both options).
relig_tidy |>
  # Separate by -
  separate(income, into = c("income_inf", "income_sup"), sep = "-|<")
```

### Question 5

>  Now think about how we can convert the income limits to numerics (removing symbols, letters, etc.).

```{r}
#| code-fold: true
#| eval: false

# To do this we will use the `{stringr}` package, specifically the
# `str_remove_all()` function, to which we can pass the characters 
# we want to remove (`$` being a reserved character must be indicated with `$`).
library(stringr)
relig_tidy$income_inf <-
  str_remove_all(relig_tidy$income_inf, "\\$|>|k")
relig_tidy$income_sup <-
  str_remove_all(relig_tidy$income_sup, "\\$|>|k")

relig_tidy
```

### Question 6

> Where we have `“Don't now/refused”`.... what should we have?


```{r}
#| code-fold: true
#| eval: false

# It should be missing data: if it contains such a phrase, `NA`
# otherwise its value
relig_tidy$income_inf <-
  if_else(str_detect(relig_tidy$income_inf, "refused"), NA, relig_tidy$income_inf)
relig_tidy$income_sup <-
  if_else(str_detect(relig_tidy$income_sup, "refused"), NA, relig_tidy$income_sup)

# In the first line, that `“”` should also be `NA``
relig_tidy$income_inf <-
  if_else(relig_tidy$income_inf == "", NA, relig_tidy$income_inf)
relig_tidy$income_suop <-
  if_else(relig_tidy$income_sup == "", NA, relig_tidy$income_sup)
```

### Question 7

> If you also notice that the numbers are actually characters, how to convert them?

```{r}
#| code-fold: true
#| eval: false

relig_tidy$income_inf <- as.numeric(relig_tidy$income_inf)
relig_tidy$income_sup <- as.numeric(relig_tidy$income_sup)
relig_tidy
```

### Question 8

> Can you think of any way to "quantify numerically" the missing values we have in this case?

```{r}
#| code-fold: true
#| eval: false

# If you notice actually when there is absent at the lower limit
# we could actually put a 0 (no one can earn less than that)
# and when we have it at the upper limit it would be `Inf`.
relig_tidy$income_inf <-
  if_else(is.na(relig_tidy$income_inf), 0, relig_tidy$income_inf)
relig_tidy$income_sup <-
  if_else(is.na(relig_tidy$income_sup), Inf, relig_tidy$income_sup)
relig_tidy
```

### Question 9

> Why was it important to have it in a tidy format? We will see it later when visualizing the data but this already allows us to perform very quick filters with very little code. For example: how many agnostic people with income greater than (or equal to) 30 do we have?

```{r}
#| code-fold: true
#| eval: false


sum(relig_tidy$people[relig_tidy$religion == "Agnostic" & relig_tidy$income_inf >= 30])
```

