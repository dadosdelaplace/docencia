---
title: "Entrega estadística descriptiva y regresión lineal"
author: "C. Tangana - DNI: 00000000-X"
format:
  html:
    theme: [style.scss]
    embed-resources: true
    toc: true
    toc-location: right
    toc-title: Índice
---

## Instrucciones (leer antes de empezar)

- Deberías estar abriendo este `.qmd` dentro de un proyecto en `R Studio`.

- Modifica en el documento `.qmd` tus datos personales (nombre e ID) situados en la cabecera del archivo. **No toques nada más** en la cabecera (ten en cuenta que he incluido `embed-resources: true` para que todo quede contenido en un único html sin archivos extra, y `theme: [style.scss]` para darle un estilo cuco a la entrega con el archivo `style.scss` en la carpeta).

- Asegúrese, **ANTES de seguir editando** el documento, de que el archivo `.qmd` se renderiza correctamente y se genera el correspondiente `.html` en la carpeta local de su ordenador. Los chunks (cajas de código) creados están vacíos o incompletos, de ahí que la mayoría de ellos tengan la opción `#| eval: false`. Una vez que edites lo que consideres, debes cambiar cada chunck a `#| eval: true` (o quitarla directamente) para ejecutarlos.

- Recuerda que puedes ejecutar chunk a chunk con el botón *play* o ejecutar todos los chunks hasta un chunk determinado (con el botón a la izquierda del anterior)

- Sólo se evaluará el archivo `.html` generado.


### Paquetes requiridos

Carga a continuación los paquetes que vayas a necesitar:

```{r}
#| message: false
#| warning: false
rm(list = ls())
library(tidyverse)
library(performance)
library(showtext)
library(sysfonts)
library(janitor)
```

## Ejercicio 1: creación tema gráficos

> Crea un estilo personalizado para todos los gráficos de la práctica. 

::: callout-note
Para establecer un tema para todos los gráficos dentro de un mismo quarto hacemos uso de la función `theme_set()`. Si más tarde queremos modificarlo podríamos hacerlo con la función `theme_update()` ambas funciones pertenecen al paquete `ggplot2`. 
:::

::: callout-note
Podemos elegir el tipo de letra que usan los gráficos. Para ver las fuentes disponibles puedes visitar <https://fonts.google.com/>. Para poder usar diferentes fuentes deberemos instalar los paquetes `sysfonts` y `showtext`. Con la función `font_add_google()` le indicaremos la tipografía y con `showtext_auto()` nos permite su uso.

También podemos hacer uso de las fuentes de nuestro ordenador usando `extrafont::font_import()` y luego `extrafont::loadfonts()` (del paquete `{extrafont}`)
:::

Un ejemplo sencillo podría ser el siguiente: 

```{r}
#| warning: false
#| eval: false
font_add_google(name = "Lora")
showtext_auto()
theme_set(theme_minimal(base_family = "Lora")) 

# Configurar tema
theme_update(
  plot.title = element_text(color = "#C34539", face = "bold", size = 33),
  plot.subtitle = element_text(color = "#3E6FCB", face = "bold", size = 21),
  axis.title.x = element_text(size = 19),
  axis.title.y = element_text(size = 19))
```


## Ejercicio 2: descripción de la base de datos

> Lee el conjunto de datos `datos_colesterol.csv`. A continuación normaliza los nombres de las variables a `nombre_en_minuscula`. Tras ello utiliza el código que estimes necesario para responder a las siguientes preguntas:

- ¿Cuántas variables hay en el conjunto de datos? ¿Y observaciones?

- ¿Qué variables tienen valores missing?

- ¿De qué tipo son las variables que se presentan en el conjunto de datos? 

::: callout-note
## Nota

Las variables cualitativas diferéncialas en nominales y ordinales. 
:::

```{r}
colesterol <- read_csv(file = "./datos_colesterol.csv") |> 
  janitor::clean_names()
colesterol
```


## Ejercicio 3: valores ausentes

### Ejercicio 3.1

> Haz uso de `count()` para determinar qué porcentaje de valores ausentes tenemos en la variable colesterol. 


```{r}
colesterol |>
  count(is.na(colesterol)) |> 
  mutate("porc" = 100*n/sum(n))
```

### Ejercicio 3.2.

> Calcula el porcentaje de valores ausentes de todas las variables del conjunto de datos salvo colesterol. En aquellos casos donde representen menos de un 5%, elimina los registros con ausentes en dichas variables. En aquellos con más de un 5% imputa su valor por lo que consideres más apropiado (media, mediana o moda).

```{r}
colesterol |>
    summarise(across(everything(), function(x) { 100*sum(is.na(x)) / length(x) }))
colesterol <-
  colesterol |> 
  drop_na(edad, peso, consumo_grasas, tabaquismo, sexo,
          antecedentes, presion_sistolica, presion_diastolica, glucosa)

colesterol_imput <- 
  colesterol |> 
  mutate(estatura = if_else(is.na(estatura), mean(estatura, na.rm = TRUE), estatura),
         nivel_actividad = if_else(is.na(nivel_actividad), "Moderada", nivel_actividad))
```

## Ejercicio 4: variables cualitativas

> Responde a las siguientes cuestiones sobre las variables cualitativas

- Cuáles y cuántas son las modalidades de cada variable.

- Calcula las tablas de frecuencias absolutas para cada variable cualitativa y determina el valor de la moda

```{r}
#| message: false
colesterol_imput |> pull(nivel_actividad) |> table()
colesterol_imput |> pull(consumo_grasas) |> table()
colesterol_imput |> pull(tabaquismo) |> table()
colesterol_imput |> pull(sexo) |> table()
colesterol_imput |> pull(antecedentes) |> table()
```

> Calcula las tablas de frecuencia que consideres para responder:

- ¿Qué % de pacientes tienen un nivel de actividad alta?

- ¿Qué % de las pacientes mujeres fuman?

- ¿Qué % de los que tienen nivel de colesterol alto tienen un nivel bajo de actividad?

```{r}
# 14.59%
prop.table(colesterol_imput |> pull(nivel_actividad) |> table())

# 31.77%
prop.table(table(colesterol_imput$tabaquismo, colesterol_imput$sexo), margin = 2)

# 29.03%
prop.table(table(colesterol_imput$consumo_grasas, colesterol_imput$nivel_actividad),
           margin = 1)
```

> Convierte las cualitativas a factor tal que a) las ordinales sean eso, ordinales; b) las nominales sean eso, nominales; c) las binarias sean TRUE/FALSE.

```{r}
colesterol_fct <- 
  colesterol_imput |> 
  mutate("nivel_actividad" =
           factor(nivel_actividad, levels = c("Baja", "Moderada", "Alta"),
                  ordered = TRUE),
         "consumo_grasas" =
           factor(consumo_grasas, levels = c("Bajo", "Moderado", "Alto"),
                  ordered = TRUE),
        "sexo" = factor(sexo),
        "tabaquismo" = tabaquismo == "Sí",
        "antecedentes" = antecedentes == "Sí")
```



## Ejercicio 5: creación nueva variable 

> Crea una nueva variable que represente el IMC, llámala ´imc´. 

$$IMC = \frac{peso(kg)}{estatura^2(m)}$$

```{r}
colesterol_fct <- 
  colesterol_fct |> 
  mutate(imc = peso/estatura^2)
```


## Ejercicio 6: variables cuantitativas

> Calcula para las variables numéricas la media, desviación típica, mediana y coeficiente de variación (incluyendo la variable nueva). Sin realizar ningún gráfico determina si las variables numéricas son simétricas. ¿Crees que la media es una medida representativa para todas las variables?

::: callout-note
## Recordatorio 

El coeficiente de variación no está definido en una función de `R` pero se calcula como $CV = \frac{\sigma}{\bar x}$.

Se puede interpretar como el grado de variabilidad de una variable de forma relativa, es decir, independiente de la escala de la variable.
:::

```{r}
resumen <- 
  colesterol_fct |> 
  summarise(medias = across(where(is.numeric), mean, na.rm = TRUE),
            sd = across(where(is.numeric), sd, na.rm = TRUE),
            mediana = across(where(is.numeric), median, na.rm = TRUE),
            cv = sd/medias) 

resumen$medias
resumen$mediana
resumen$sd
resumen$cv
```


## Ejercicio 7: gráficas

> Grafica las variables que te salieron con menor y mayor coeficiente de variación en el ejercicio anterior con el tipo de gráfico que consideres más oportuno. ¿Qué ves de diferente?

```{r}
colesterol_fct |> 
  ggplot(aes(x = estatura)) + 
  geom_density(fill = "red", alpha = 0.5) 

colesterol_fct |>
  ggplot(aes(x = edad), fill = "purple") + 
  geom_density(fill = "purple", alpha = 0.5) 
```


::: callout-warning
## Aviso 

Se valorará que los gráficos sean bonitos y el tiempo dedicado a personalizarlos. 
:::




## Ejercicio 8: valores ausentes 2

> Separa en dos conjuntos de datos aquellas observaciones que tengan valor missing en la variable colesterol de las que no y guardalos. Decide cuál usaremos para entrenar y cuál para predecir.

```{r}
datos_modelo <- 
  colesterol_fct |> 
  filter(!is.na(colesterol))

prediccion <- 
  colesterol_fct |> 
  filter(is.na(colesterol))
```

## Ejercicio 9: hábitos hombre vs mujer

> Con el dataset completo que sale del ejercicio 7 -> Se quiere comparar los hábitos que tienen los hombres frente a las mujeres.  ¿Crees que un sexo tiene peores hábitos que otro en alguna de las variables? Justifica tu respuesta con  a) tablas; b) numéricamente con un test estadístico y c) gráficamente con gráficos adecuados

```{r}
prop.table(table(colesterol_fct$sexo, colesterol_fct$nivel_actividad), margin = 1)
prop.table(table(colesterol_fct$sexo, colesterol_fct$consumo_grasas), margin = 1)
prop.table(table(colesterol_fct$sexo, colesterol_fct$tabaquismo), margin = 1)

chisq.test(colesterol_fct$sexo, colesterol_fct$nivel_actividad)
chisq.test(colesterol_fct$sexo, colesterol_fct$consumo_grasas)
chisq.test(colesterol_fct$sexo, colesterol_fct$tabaquismo)



ggplot(colesterol_fct) +
  geom_bar(aes(x = consumo_grasas,
               fill = sexo),
           position = "fill", alpha = 0.6) +
  ggthemes::scale_fill_colorblind() +
  theme_minimal()

ggplot(colesterol_fct) +
  geom_bar(aes(x = nivel_actividad,
               fill = sexo),
           position = "fill", alpha = 0.6) +
  ggthemes::scale_fill_colorblind() +
  theme_minimal()

ggplot(colesterol_fct) +
  geom_bar(aes(x = tabaquismo,
               fill = sexo),
           position = "fill", alpha = 0.6) +
  ggthemes::scale_fill_colorblind() +
  theme_minimal()
```



## Ejercicio 10: cuanti vs cuanti

> Haciendo uso de los datos destinados a entrenar el modelo -> Calcula la matriz de correlaciones de las variables numéricas y visualizalo.

```{r}
#| message: false
#| warning: false
datos_modelo |>
  select(where(is.numeric)) |> 
  cor() |> 
  corrplot::corrplot()

GGally::ggpairs(colesterol_fct |> select(where(is.numeric)))
```

> Observa las correlaciones de la variable IMC respecto a peso y altura. ¿Cómo es posible que se obtengan dichos valores de correlaciones si IMC se calcula a partir de ambas?


## Ejercicio 11: regresión lineal univariante

> Observar las correlaciones de la variable colesterol respecto al resto de variables. Si solo pudieses usar una predictora en un modelo de regresión lineal, ¿cuál usarías? Justifica tu respuesta

```{r}
#| eval: false
```

> Tras tener candidata, realiza un ajuste de regresión lineal univariante (solo con los datos destinados a entrenar el modelo) e interpreta todo lo que puedas de la salida: estimación puntual de los coeficientes, contrastes de significación, bondad de ajuste, etc.

```{r}
modelo_univariante <- lm(data = datos_modelo, formula = colesterol ~ imc)
modelo_univariante |> summary()
```


> Haciendo uso de la salida responde a las siguinetes preguntas

- ¿Qué ecuación tiene nuestra recta de regresión estimada?
- ¿Cuánto estima el modelo que sube o baja el colesterol por cada unidad que aumente el IMC?
- ¿Es el modelo significativo?

> Visualiza tus errores (residuos) de la manera que consideres para poder intuir si siguen una distribución normal

```{r}
ggplot(tibble("res" = modelo_univariante$residuals)) +
  geom_boxplot(aes(y = res)) +
  theme_minimal()

ggplot(tibble("res" = modelo_univariante$residuals)) +
  geom_density(aes(x = res)) +
  theme_minimal()
```


> Visualiza tus errores (residuos) de la manera que consideres para poder intuir si hay o no homocedasticidad (la varianza de los residuos es constante)

```{r}
ggplot(tibble("i" = 1:length(modelo_univariante$residuals),
              "res" = modelo_univariante$residuals),
       aes(x = i, y = res)) +
  geom_point() +
  geom_smooth(se = FALSE) +
  theme_minimal()
```

> Si te fijas hay al menos un residuo en la parte inferior muy alejada de los demás: tenemos outliers. 

## Ejercicio 12: manejo de atípicos

> Vamos a usar el paquete `{outliers}`. En dicho paquete tenemos la función `scores()` que nos permite puntuar la observación en función de lo atípico que sea (usando diferentes métodos de detección). Por ejemplo, si la variable fuese simétrica, podemos usar `type = "z"` y nos devuelve la cantidad de desviaciones típicas que se aleja cada dato de la normal (nos devuelve $k$ tal que $\overline{x} + k *\sigma_x$)

```{r}
set.seed(12345)
x <- rnorm(n = 20, mean = 0, sd = 10)
outliers::scores(x, type = "z")
```

> Podríamos definir un outlier como todo aquel valor cuyo k en valor absoluto sea mayor que 2

```{r}
which(abs(outliers::scores(x, type = "z")) > 2)
```

> Si no fuese simétrica (es decir, la media no es representativa), podríamos usar por ejemplo `type = "iqr"` que nos nos devuelve la cantidad de rangos intercuartílicos (IQR) que se aleja cada dato de Q3 o Q1 (nos devuelve $k$ tal que $Q3 + k *IQR$ y $Q1 + k *IQR$). 

```{r}
set.seed(12345)
y <- rnorm(n = 20, mean = 0, sd = 10)^2
outliers::scores(y, type = "iqr")
```

> Podríamos definir un outlier como todo aquel valor cuyo k en valor absoluto sea mayor que 2

```{r}
which(abs(outliers::scores(y, type = "iqr")) > 2)
```

> Para comprobar si una variable es simétrica podemos usar `skewness` del paquete `{moments}` (si fuese simétrica, debería estar en torno a 0 el parámetro de la asimetría). También se puede cuantificar midiendo la distancia entre media y mediana

```{r}
moments::skewness(x)
moments::skewness(y)
(mean(x) - median(x))/median(x)
(mean(y) - median(y))/median(y)
```

> Te toca a ti. Detecta si la variable colesterol es o no simétrica y en función de ello detecta aquellas observaciones que sean atípicas (usando $k = 2.5$) y elimina dichas observaciones (la fila entera)

```{r}
moments::skewness(datos_modelo$colesterol)
(mean(datos_modelo$colesterol) - median(datos_modelo$colesterol))/median(datos_modelo$colesterol)
```

```{r}
datos_modelo <- 
  datos_modelo |> 
  slice(-which(abs(outliers::scores(datos_modelo$colesterol, type = "z")) > 2.5))
```

> Una vez eliminados vuelve a aplicar el método de detección (ya que ahora la media habrá cambiado). Hazlo de manera iterativa hasta que ninguna salga outlier

```{r}
datos_modelo <- 
  datos_modelo |> 
  slice(-which(abs(outliers::scores(datos_modelo$colesterol, type = "z")) > 2.5))

datos_modelo <- 
  datos_modelo |> 
  slice(-which(abs(outliers::scores(datos_modelo$colesterol, type = "z")) > 2.5))

datos_modelo <- 
  datos_modelo |> 
  slice(-which(abs(outliers::scores(datos_modelo$colesterol, type = "z")) > 2.5))
```

## Ejercicio 13: regresión univariante again

> Tras la depuración de outliers realiza de nuevo un ajuste de regresión lineal univariante.  Visualiza de nuevo tus errores (residuos) de la manera que consideres para poder intuir si hay o no homocedasticidad (la varianza de los residuos es constante)

```{r}
modelo_univariante <- lm(data = datos_modelo, formula = colesterol ~ imc)
modelo_univariante |> summary()
```

```{r}
ggplot(tibble("i" = 1:length(modelo_univariante$residuals),
              "res" = modelo_univariante$residuals),
       aes(x = i, y = res)) +
  geom_point() +
  geom_smooth(se = FALSE) +
  theme_minimal()
```

> Si te fijas hay al menos un residuo en la parte inferior muy alejada de los demás: tenemos outliers.

## ...



Chequea que el modelo cumple las hipótesis necesarias. Spoiler: no todas se cumplen. ¿Cuáles no?

```{r}
performance::check_model(modelo_univariante)
performance::check_heteroscedasticity(modelo_univariante)
olsrr::ols_test_normality(modelo_univariante)
performance::check_autocorrelation(modelo_univariante)
```

> 

```{r}
modelo_univariante_cuadratico <-
  lm(data = datos_modelo, formula = colesterol ~ I(imc^2))
modelo_univariante_cuadratico |> summary()
```


## Ejercicio 12: regresión lineal modelo saturado

> Como decíamos se quiere predecir la variable colesterol. Usando ya Realiza un modelo saturado con todas las variables y calcula el ANOVA. ¿Qué conclusiones obtienes? (No hace falta que interpretes todos los parámetro, solo sacas conclusiones globales: ¿el modelo es signicativo? ¿todos los parámetros lo son (cuáles si/no)? ¿qué % de varianza explica nuestro modelo saturado?). 

::: callout-note
## Recuerda

En el ejercicio 8 separaste el conjunto de datos en 2. Haz uso del conjunto sin ausentes en la variable colesterol para generar los modelos y emplea la otra base solo cuando sea necesario predecir. 
:::

```{r}
modelo_saturado <- lm(colesterol ~ ., data = datos_modelo)
summary(modelo_saturado)
modelo_saturado |> aov()
modelo_saturado |> anova()
```




## Ejercicio 12: regresión lineal filtrado variables

> Antes de realizar la selección de variables del modelo emplea la función `check_collinearity()` de la librería `performance`. Para comprobar la colinealidad. ¿Qué variables presentan problemas de colinealidad? Elimina (una a una) las que consideres y justifica por qué.

::: callout-note
## Colinealidad

METER EXPLICACIÓN
:::

```{r}
performance::check_collinearity(modelo_saturado)

# Quitar peso
modelo_sin_peso <- lm(colesterol ~ ., data = datos_modelo |> select(-c(peso)))
performance::check_collinearity(modelo_sin_peso)
modelo_sin_peso |> summary()
```

> Con los datos sin las variables que hayas considerado, realiza de nuevo un modelo de regresión lineal. ¿Siguen sobrando variables?


## Ejercicio 13: selección de modelos

> Si sobran más variables, utilizando la función `stepAIC()` de la librería `MASS`, realiza una selección de las variables automática del modelo en base al criterio BIC (penalización `k = log(n)` siendo n el tamaño muestral) y plantea el modelo final. 

::: callout-note
## Ordinales

...
:::

```{r}
MASS::stepAIC(modelo_sin_peso, k = log(nrow(datos_modelo)))

modelo_BIC <-
  lm(colesterol ~
       edad + as.numeric(nivel_actividad) + as.numeric(consumo_grasas) +
       tabaquismo + antecedentes + imc, data = datos_modelo)
summary(modelo_BIC)
```

## Ejercicio ___: regresión lineal filtrado variables

> Explica por qué se eliminan variables del modelo cuando estas no son significativas. ¿Qué contraste se plantea?


## Ejercicio ___: regresión lineal diagnosis modelo

> Realiza la diagnosis del modelo en tu modelo final. 

```{r}
# Falla normalidad
performance::check_model(modelo)
performance::check_heteroscedasticity(modelo)
olsrr::ols_test_normality(modelo)
performance::check_autocorrelation(modelo)

linealidad <- lm(data = tibble("fitted" = modelo$fitted.values,
                               "residuals" = modelo$residuals),
                 formula = residuals ~ fitted + I(fitted^2))
linealidad |> summary()

linealidad <- lm(data = tibble("fitted" = modelo$fitted.values,
                               "residuals" = modelo$residuals),
                 formula = residuals ~ fitted)
linealidad |> summary()



ggplot(tibble("fitted" = modelo$fitted.values,
              "residuals" = modelo$residuals),
       aes(x = fitted, y = residuals)) +
  geom_point(size = 3, alpha = 0.7) +
  geom_smooth(se = FALSE) +
  theme_minimal()

```

## Ejercicio ___: regresión lineal término cuadrático

> En caso de que no se cumpla alguna de las hipótesis del modelo considera meter en el modelo la variable IMC con su término cuadrático. Resuelve los problemas de colinealidad y repite la diagnosis del modelo. 

```{r}
modelo <- lm(colesterol ~ edad + consumo_grasas + tabaquismo + 
               antecedentes + I(imc^2), data = datos_modelo)
summary(modelo)

performance::check_model(modelo)
performance::check_heteroscedasticity(modelo)
olsrr::ols_test_normality(modelo)
performance::check_autocorrelation(modelo)
```



## Ejercicio ___: regresión lineal interpretación del modelo 

> Interpreta los parámetros del modelo final

## Ejercicio ___: regresión lineal evaluación del ajuste

> Evalúa el modelo tanto gráfica como numéricamente y comenta lo que obtengas. 

```{r}
graf <- ggplot(tibble("y" = modelo$model$colesterol, "y_est" = modelo$fitted.values),
       aes(x = y, y = y_est)) +
  geom_point(size = 1.2, alpha = 0.75) +
  geom_smooth(method = "lm", se = FALSE) +
  theme_minimal() +
  labs(x = "Valores reales", y = "Valores estimados")

plotly::ggplotly(graf)
```


## Ejercicio ___: regresión lineal predicción

> Realiza la predicción para la observaciones que tenían valores missing en colesterol

```{r}
predict(modelo, prediccion |> select(-colesterol))
```


## Ejercicio ___: filtrado aleatorio de observaciones

> En los próximos apartados vamos a visualizar si el modelo lo realizamos con menos observaciones. Para ello busca como se emplea y utiliza la función `slice_sample()` de la librería `dplyr` y selecciona una muestra aleatoria de tu base de datos original (sin imputar valores en caso de que lo hicieses) de 35 individuos eliminando previamente las observaciones con valores ausentes

```{r}
colesterol_35 <- 
  colesterol |> 
  drop_na() |> 
  slice_sample(n = 35)
```

## Ejercicio ___: comprobar como cambian los p-valores de las variables 

> Realiza de nuevo un modelo saturado (incluyendo el IMC con su término cuadrático), resuelve los problemas de colinealidad y selecciona las variables significativas.

```{r}
modelo <- lm(colesterol ~ . + I(imc^2), data = colesterol_35)

MASS::stepAIC(modelo)
```


## Ejercicio ___: regresión lineal diagnosis modelo

> Realiza la diagnosis del modelo

```{r}
performance::check_model(modelo)
performance::check_heteroscedasticity(modelo)
olsrr::ols_test_normality(modelo)
performance::check_autocorrelation(modelo)
```

## Ejercicio ___: conclusiones

> Comenta los resultados obtenidos y las diferencias con el primer modelo. 

