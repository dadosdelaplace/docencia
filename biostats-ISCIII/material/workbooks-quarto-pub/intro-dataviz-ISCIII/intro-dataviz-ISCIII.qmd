---
title: "Introducción a la visualización de datos"
subtitle: "Cuadernos prácticos del Máster de Bioinformática (curso 2024-2025)"
author: "Javier Álvarez Liébana"
format:
  html:
    theme: [default, style.scss]
    toc: true
    toc-title: Índice
    toc-depth: 5
    toc-location: left
    number-sections: true
embed-resources: true
execute: 
  echo: true
---


## Visualización de datos


El paquete `{ggplot2}` se basa en la idea de Wilkinson en [**«Grammar of graphics»**]{.hl-yellow}: dotar a los gráficos de una gramática propia. Una de las principales fortalezas de `R` es la [**visualización**]{.hl-yellow} con `{ggplot2}`.

```{r}
library(ggplot2)
```

La [**visualización de datos**]{.hl-yellow} debería ser una parte fundamental de todo análisis de datos. No es solo una cuestión estética.

![](img/telling_dataviz.jpg){width="400"}

La filosofía detrás de `{ggplot2}` es entender los [**gráficos como parte del flujo**]{.hl-yellow} de trabajo, dotándoles de una [**gramática**]{.hl-yellow}. El objetivo es empezar con un lienzo en blanco e ir [**añadiendo capas a tu gráfico**]{.hl-yellow}. La ventaja de `{ggplot2}` es poder [**mapear atributos estéticos**]{.hl-purple} (color, forma, tamaño) de objetos geométricos (puntos, barras, líneas) en función de los datos.


La **documentación** del paquete puedes consultarla en <https://ggplot2-book.org/introduction.html>

![](img/grammar_ggplot2.jpg)


![](img/tarta_ggplot2.png)


![](img/tarta_recortada_ggplot2.jpg)

Un gráfico se podrá componer de [**capas**]{.hl-yellow}

-   [**Datos (data)**]{.hl-purple}
-   [**Mapeado (aesthetics)**]{.hl-purple} de elementos estéticos: ejes, color, forma, etc (en función de los datos)
-   [**Geometría (geom)**]{.hl-purple}: puntos, líneas, barras, polígonos, etc.
-   [**Componer gráficas (facet)**]{.hl-purple}
-   [**Transformaciones (stat)**]{.hl-purple}: ordenar, resumir, etc.
-   [**Coordenadas (coord)**]{.hl-purple}: coordenadas cartesianas, polares, grids, etc.
-   [**Temas (theme)**]{.hl-purple}: fuente, tamaño de letra, subtítulos, captions, leyenda, ejes, etc.


### Primer intento: scatter plot

Ahora que sabemos importar archivos, vamos a importar el conjunto de datos `gapminder`: un fichero con **datos de esperanzas de vida, poblaciones y renta per cápita** de distintos países en distintos momentos temporales.

```{r}
library(readr)
gapminder <- read_csv(file = "./datos/gapminder.csv")
gapminder
```


El fichero consta de 1704 registros y 6 variables: `country`, `continent`, `year`, `lifeExp` (esperanza de vida), `pop` (población) y `gdpPercap` (renta per cápita).

```{r}
library(dplyr)
glimpse(gapminder)
```

Para empezar con algo sencillo [**filtraremos solo los datos de 1997**]{.hl-yellow}

```{r}
gapminder_1997 <- gapminder[gapminder$year == 1997, ]
```

Imagina que queremos dibujar un [**scatter plot**]{.hl-yellow} (diagrama de dispersión de puntos, que enfrenta a una variable `x` con una variable `y`).


Si tuviéses que [**construir capa a capa el gráfico**]{.hl-yellow}: ¿qué necesitarías?

#### Ingredientes: datos

¿Qué [**elementos necesitamos**]{.hl-yellow} para realizar un diagrama de puntos? Para [**iniciar el lienzo VACÍO (de momento)**]{.hl-purple} necesitamos llamar una base de datos con `ggplot(datos)`


-   [**Datos (data)**]{.hl-yellow}: conjunto `gapminder_1997`.



```{r}
ggplot(gapminder_1997)
```

#### Ingredientes: mapeo (x, y)

Ya tenemos linkada la base de datos pero necesitamos [**indicarle que variables de la tabla**]{.hl-yellow} queremos que relacione con el gráfico (en este caso necesita mínimo una `x` y otra `y`).


-   [**Datos (data)**]{.hl-yellow}: conjunto `gapminder_1997`.

-   [**Mapeado**]{.hl-yellow}: indicar dentro de `aes()` (aesthetics) las variables en cada coordenada. Todo [**dentro de aes() será mapeado de la base de datos**]{.hl-purple}

```{r}
ggplot(gapminder_1997,
       aes(x = gdpPercap, y = pop))
```


#### Geometría: geom_point()

De momento sigue vacío ya que aún no le hemos indicado lo más importante: [**¿qué tipo de gráfica queremos hacer?**]{.hl-yellow}. Para eso usaremos las [**capas geométricas**]{.hl-yellow} que empiezan por `geom_xxx()`.


-   [**Geometría (geom)**]{.hl-yellow}: optaremos por **puntos** usando `geom_point()`.

```{r}
ggplot(gapminder_1997,
       aes(x = gdpPercap, y = pop)) +
  geom_point()
```


#### Rol de los ejes: (x, y)


Vamos a profundizar en ese mapeado: ¿cómo [**cambiar el rol**]{.hl-yellow} de los ejes (población en el eje X y renta per cápita en el eje Y)?

-   **Eje X**: población (variable `pop`)
-   **Eje Y**: renta per cápita (variable `gdpPercap`)

```{r}
ggplot(gapminder_1997,
       aes(x = pop, y = gdpPercap)) +
  geom_point() 
```


¿Y un scatter plot con **esperanza de vida** en eje X frente a **renta per cápita**?

-   **Eje X**: esperanza de vida (variable `lifeExp`)
-   **Eje Y**: renta per cápita (variable `gdpPercap`)

```{r}
ggplot(gapminder_1997,
       aes(y = gdpPercap, x = lifeExp)) +
  geom_point()
```


#### Color, size, shape: fijos

Dentro de `geom_point()` tenemos varios **parámetros estéticos a configurar**:

-   `na.rm = ...`: si queremos que nos quite ausentes.

-   `color = ...`: color (si tiene dimensión, color del contorno)

-   `fill = ...`: color del relleno (si tiene dimensión)



Empezaremos por un [**color fijo**]{.hl-yellow}, por ejemplo `"red"` (existen otros como `"blue"`, `"black"`, `"yellow"`, etc)

```{r}
ggplot(gapminder_1997,
       aes(y = gdpPercap, x = lifeExp)) +
  geom_point(color = "red")
```


-   `size = ...`: tamaño de la geometría (en este caso el [**tamaño de los puntos**]{.hl-yellow}), cuanto mayor sea el número, mayor será el tamaño de la geometría.

```{r}

ggplot(gapminder_1997,
       aes(y = gdpPercap, x = lifeExp)) +
  geom_point(color = "red", size = 7) 
```


-   `alpha = ...`: grado de opacidad del color (1 totalmente opaco, 0 totalmente transparente)

```{r}

ggplot(gapminder_1997,
       aes(y = gdpPercap, x = lifeExp)) +
  geom_point(color = "red", size = 7,
             alpha = 0.4)
```

-   `shape = ...`: forma de la geometría, en este caso del «punto» (ver todas las opciones en `vignette("ggplot2-specs")`)

```{r}
ggplot(gapminder_1997,
       aes(y = gdpPercap, x = lifeExp)) +
  geom_point(color = "red",
             fill = "black",
             size = 7,
             alpha = 0.4,
             shape = 23)
```


-   `stroke = ...`: tamaño del contorno

```{r}
ggplot(gapminder_1997,
       aes(y = gdpPercap, x = lifeExp)) +
  geom_point(color = "red", size = 7,
             alpha = 0.4, stroke = 3)
```


Los colores también podemos asignárselos por su **código hexadecimal**, consultando en <https://htmlcolorcodes.com/es/>, eligiendo el color que queramos. El código hexadecimal siempre comenzará con `#`

```{r}
# Color en hexadecimal
# https://htmlcolorcodes.com/es/
ggplot(gapminder_1997,
       aes(y = gdpPercap, x = lifeExp)) +
  geom_point(color = "#A02B85",
             alpha = 0.4, size = 7) 
```



### Mapeado estético: aes()

Hasta ahora los **atributos estéticos** se los hemos pasado fijos y [**constantes**]{.hl-yellow}. Pero la verdadera potencia y versatilidad de `ggplot` es que podemos [**mapear los atributos estéticos en función de los datos**]{.hl-yellow} en `aes()` para que **dependan de variables de los datos**.

. . .

Por ejemplo, vamos a asignar un [**color a cada dato en función de su continente**]{.hl-yellow} con `aes(color = continent)`

```{r}
# Tamaño fijo
# Color por continentes
ggplot(gapminder_1997,
       aes(y = gdpPercap, x = lifeExp,
           color = continent)) +
  geom_point(size = 5)
```



Podemos combinarlo con lo que hemos hecho anteriormente:

-   [**color**]{.hl-yellow} en función del [**continente**]{.hl-purple}.

-   [**tamaño**]{.hl-yellow} en función de la [**población**]{.hl-purple}.

-   [**transparencia**]{.hl-yellow} la fijamos [**constante**]{.hl-purple} del 50%.

```{r}
ggplot(gapminder_1997,
       aes(y = gdpPercap, x = lifeExp,
           color = continent, size = pop)) +
  geom_point(alpha = 0.7)
```

A este scatter plot particular se le conoce **BUBBLE CHART**


Reflexionemos sobre el gráfico anterior:

-   **color** en función del **continente**.
-   **tamaño** en función de la **población**
-   **transparencia** fija del 50%


Usando los datos hemos conseguido dibujar en un [**gráfico bidimensional 4 variables**]{.hl-yellow}: `lifeExp` y `gdpPercap` en los ejes , `continent` como color y `pop` como tamaño de la geometría, con muy pocas líneas de código.

### Escalas (scale): ejes

Es importante entender que [**hasta ahora solo hemos indicado que un atribut estético A dependa de una variable B de los datos**]{.hl-yellow}.

Por ejemplo, si `aes(color = variable)` le estoy diciendo que cada modalidad distinta de la variable adopte un color distinto pero...[**¿qué color?**]{.hl-yellow}. Para ello usaremos una de las capas más importantes, las [**capas de escalas**]{.hl-yellow} `scale_xxx()`.

#### scale_x y scale_y

Hasta ahora dentro de `aes()` solo le indicábamos que variable mapeamos pero no sus ajustes. Por ejemplo, vamos a **configurar el eje x para tener marcas personalizadas** cada 10 unidades (`scale_x_continuous(breaks = ...)`)

```{r}
ggplot(gapminder_1997, aes(y = gdpPercap, x = lifeExp, color = continent)) +
  geom_point(alpha = 0.7) +
  scale_x_continuous(breaks = seq(35, 85, by = 10)) +
  labs(x = "Esperanza de vida", y = "Renta per cápita", title = "Primer ggplot",
       caption = "J. Álvarez Liébana", color = "continente")
```

#### scale_color y scale_fill

La misma idea la podemos aplicar a otro atríbuto como los [**colores**]{.hl-yellow} con `scale_color_...()` y `scale_fill_...()`: hemos indicado que mapeé dicho atributo por continente pero...¿qué colores usar?


Con `scale_color_manual()` podemos indicar manualmente una [**paleta**]{.hl-yellow} (puedes buscar en <https://htmlcolorcodes.com/>)

```{r}
pal <- c("#A02B85", "#2DE86B", "#4FB2CA", "#E8DA2D", "#E84C2D")
ggplot(gapminder_1997, aes(y = gdpPercap, x = lifeExp, color = continent)) +
  geom_point(alpha = 0.7) +
  scale_x_continuous(breaks = seq(35, 85, by = 10)) +
  scale_color_manual(values = pal) +
  labs(x = "Esperanza de vida", y = "Renta per cápita",
       title = "Primer ggplot", caption = "J. Álvarez Liébana",
       color = "continente")
```

Otra opción es elegir alguna de las [**paletas de colores diseñadas**]{.hl-yellow} en el paquete `{ggthemes}`:


-   `scale_color_colorblind()`: paleta de colores basada en los colores de [**daltónicos/as**]{.hl-yellow}.

```{r}
library(ggthemes)
ggplot(gapminder_1997, aes(y = gdpPercap, x = lifeExp, color = continent, size = pop)) +
  geom_point(alpha = 0.7) +
  scale_x_continuous(breaks = seq(35, 85, by = 10)) +
  scale_color_colorblind() +
  labs(x = "Esperanza de vida", y = "Renta per cápita", title = "Primer ggplot",
       caption = "J. Álvarez Liébana", color = "continente")
```


Incluso cargar [**paletas de colores diseñadas en base a películas o arte**]{.hl-yellow}

-   [**películas**]{.hl-yellow}: paquete `{harrypotter}` (repositorio de Github `aljrico/harrypotter`) usando `scale_color_hp_d()`.

```{r echo = FALSE,  out.width = "20%", fig.align = "center", fig.cap = "Paleta basada en la casa Ravenclaw"}
knitr::include_graphics("https://raw.githubusercontent.com/aljrico/harrypotter/master/readme_raw_files/palettes/ravenclaw.png")
```

```{r}
library(harrypotter)
ggplot(gapminder_1997, aes(y = gdpPercap, x = lifeExp, color = continent, size = pop)) +
  geom_point(alpha = 0.7) +
  scale_x_continuous(breaks = seq(35, 85, by = 10)) +
  scale_color_hp_d(option = "ravenclaw")+
  labs(x = "Esperanza de vida", y = "Renta per cápita", title = "Primer ggplot",
       caption = "J. Álvarez Liébana", color = "continente")
```


-   [**cuadros**]{.hl-yellow}: paquete `{MetBrewer}` (repositorio de Github `BlakeRMills/MetBrewer`) usando `scale_colour_manual(values = met.brewer(...))`.

```{r}
library(MetBrewer)
ggplot(gapminder_1997, aes(y = gdpPercap, x = lifeExp, color = continent, size = pop)) +
  geom_point(alpha = 0.7) +
  scale_x_continuous(breaks = seq(35, 85, by = 10)) +
  scale_color_manual(values = met.brewer("Monet")) +
  labs(x = "Esperanza de vida", y = "Renta per cápita", title = "Primer ggplot",
       caption = "J. Álvarez Liébana", color = "continente")
```


-   [**discos**]{.hl-yellow}: paquete `{peRReo}` (repositorio de Github `jbgb13/peRReo`) usando `scale_colour_manual(values = latin_palette())`.


```{r}
library(peRReo)
ggplot(gapminder_1997, aes(y = gdpPercap, x = lifeExp, color = continent, size = pop)) +
  geom_point(alpha = 0.7) +
  scale_x_continuous(breaks = seq(35, 85, by = 10)) +
  scale_color_manual(values = latin_palette("rosalia")) +
  labs(x = "Esperanza de vida", y = "Renta per cápita", title = "Primer ggplot",
       caption = "J. Álvarez Liébana", color = "continente")
```

#### scale_xxx

Lo mismo que hemos hecho para los ejes o colores podemos hacer para el [**resto de atríbutos estéticos**]{.hl-yellow}


Por ejemplo, vamos a indicarle que mapeé el tamaño en función de población pero indicándole el [**rango de valores**]{.hl-yellow} (continuo en este caso) entre los que moverse con `scale_size_continuous()`

```{r}
ggplot(gapminder_1997, aes(y = gdpPercap, x = lifeExp, color = continent, size = pop)) +
  geom_point(alpha = 0.7) +
  scale_x_continuous(breaks = seq(35, 85, by = 10)) +
  ggthemes::scale_color_colorblind() +
  scale_size_continuous(range = c(3, 17)) +
  labs(x = "Esperanza de vida", y = "Renta per cápita", title = "Primer ggplot",
       caption = "J. Álvarez Liébana", color = "continente")
```


### Etiquetas sencillas: labs()

Podemos también [**personalizar de manera sencilla**]{.hl-yellow} haciendo uso de la capa `labs()`:

-   `title,subtitle`: título/subtítulo
-   `caption`: pie de gráfica
-   `x, y`: nombres de los ejes
-   `size, color, fill, ...`: nombre en leyenda de las variables que codifiquen los atributos

```{r}
ggplot(gapminder_1997,
       aes(y = gdpPercap, x = lifeExp, color = continent, size = pop)) +
  geom_point(alpha = 0.7) +
  ggthemes::scale_color_colorblind() +
  labs(x = "Esp. de vida",
       y = "Renta per cápita",
       title = "Primer ggplot",
       caption = "J. Álvarez Liébana",
       color = "continente",
       size = "población")
```

#### Eliminar de la leyenda

Podemos eliminar variables de la leyenda con `guides(atributo = "none")`


```{r}
ggplot(gapminder_1997,
       aes(y = gdpPercap, 
           x = lifeExp,
           color = continent, 
           size = pop)) +
  geom_point(alpha = 0.7) +
  ggthemes::scale_color_colorblind() +
  guides(size = "none") +
  labs(x = "Esperanza de vida",
       y = "Renta per cápita",
       title = "Primer ggplot",
       caption = "J. Álvarez Liébana",
       color = "continente")
```


### Tema (básico)

Por último en este primer gráfico, vamos personalizar el tema con alguna de las capas `theme_...()`. Por ejemplo, vamos a usar `theme_minimal()` para tener un tema "austero" y minimalista (aprenderemos a definir cada detalle de nuestro tema).

```{r}
ggplot(gapminder_1997, aes(y = gdpPercap, x = lifeExp, color = continent, size = pop)) +
  geom_point(alpha = 0.7) +
  scale_x_continuous(breaks = seq(35, 85, by = 10)) +
  ggthemes::scale_color_colorblind() +
  labs(x = "Esperanza de vida", y = "Renta per cápita", title = "Primer ggplot",
       caption = "J. Álvarez Liébana", color = "continente") +
  theme_minimal()
```

## Otros gráficos

El anterior ejemplo era un **diagrama de dispersión** (bivariante) que nos permite jugar mucho con los parámetros pero empezaremos [**aprendiendo a analizar una sola variable**]{.hl-yellow} (estadística univariante).


Para ello algo fundamental será conocer la naturaleza de la variable ya que [**habrá cosas que podamos hacer con un tipo de variables y no con otras**]{.hl-yellow}. Por ejemplo, vamos a tomar el fichero de datos `starwars` del paquete `{dplyr}` y vamos a **empezar un ggplot**

```{r}
library(dplyr)
ggplot(starwars)
```


Si quiésemos hacer un diagrama de dispersión sencillo como antes entre peso y estatura sería así

```{r}
ggplot(starwars) +
  geom_point(aes(x = mass, y = height)) +
  theme_minimal()
```


¿Qué línea habrá cambiar si en lugar de hacer un diagrama de dispersión queremos hacer un [**histograma de la estatura**]{.hl-yellow} Lo que [**diferencia a un gráfico de otro es la capa geométrica**]{.hl-yellow}, así que deberemos buscar un `geom_xxx()` distinto (en este caso `geom_histogram()`)

### Histogramas

Un [**histograma es una representación gráfica de la distribución de frecuencia**]{.hl-yellow} de un conjunto de datos **numéricos continuos**. Consiste en un gráfico de barras [**PERO donde ahora la base de cada barra representa un intervalo de valores**]{.hl-yellow}, y la altura de la barra indica la frecuencia o la densidad de datos dentro de ese intervalo: ahora la [**anchura de las barras sí es relevante**]{.hl-yellow} (cuantifica la anchura del intervalo en el que estamos agrupando los datos).


Los histogramas son especialmente útiles para visualizar la forma y la dispersión de los datos aunque [**dependen de un parámetro crítico**]{.hl-red} como es la cantidad de barras (o anchura de cada barra) de las que queramos disponer.

![](img//clipboard-984736011.png){fig-align="center" width="414"}



Fíjate que si lo [**cambiamos tal cual produce error**]{.hl-red}. ¿Por qué?

```{r}
#| error: true
ggplot(starwars) + geom_histogram(aes(x = mass, y = height))
```


La capa usada (histograma) solo admite una `x` o un `y` --\> habrás gráficos bivariantes y [**gráficos univariantes**]{.hl-yellow}

```{r}
ggplot(starwars) +
  geom_histogram(aes(x = height)) +
  theme_minimal()
```


Los histogramas dependen de una [**decisión crítica**]{.hl-red} que cambiará por completo el gráfico: el número de barras (`bins = ...`).

```{r}
#| code-fold: true
ggplot(starwars) +
  geom_histogram(aes(x = height), bins = 8) +
  theme_minimal()
```

### Gráfico de densidad

Como hemos comentado una de las decisiones a tomar en un histograma es la anchura de las barras ya que dicho valor va a cambiar nuestra percepción de la distribución de los datos.

Una de las alternativas más conocidas son los conocidos como [**gráficos de densidad**]{.hl-yellow}, una especie de aproximación continua de dichas barras, proporcionando la curva que se intuye que define la forma de un histograma si hacemos las barras cada vez más finas.

![](img//clipboard-2738368484.png){fig-align="center" width="300"}


Para realizar un gráfico de densidad debemos de usar simplemente `geom_density()` como capa geométrica

```{r}
#| code-fold: true
ggplot(starwars) +
  geom_density(aes(x = height)) +
  theme_minimal()
```



Lo que hemo aprendido sobre los [**atributos estéticos de un gráfico**]{.hl-yellow} podemos aplicarlo a cualquier capa. Por ejemplo, vamos a decirle que el [**color y relleno de la densidad dependa del `sex`**]{.hl-yellow} (es decir, una densidad para cada uno).

```{r}
#| code-fold: true
#| warning: false
library(tidyverse)
ggplot(starwars |> drop_na(sex)) +
  geom_density(aes(x = height, fill = sex, color = sex),
               alpha = 0.3) +
  ggthemes::scale_color_colorblind() +
  ggthemes::scale_fill_colorblind() +
  theme_minimal()
```


El paquete `{ggridges}` y su función `geom_density_ridges()` nos permite [**visualizar densidades de distintos grupos en distintos niveles de altura**]{.hl-yellow}: en lugar de tener todas una encima de otra, podremos indicarle una variable `y`

```{r}
#| code-fold: true
#| warning: false
library(ggridges)
ggplot(starwars |> drop_na(sex)) +
  geom_density_ridges(aes(x = height, y = sex,
                          fill = sex, color = sex),
               alpha = 0.3) +
  ggthemes::scale_color_colorblind() +
  ggthemes::scale_fill_colorblind() +
  theme_minimal()
```

### Diagrama de sectores

Un [**gráfico de sectores**]{.hl-red}, también conocido como gráfico circular o pie chart en inglés, es una representación visual de datos que muestra la proporción de cada categoría dentro de un conjunto de datos en forma de un círculo dividido en sectores. Cada sector representa una categoría y su tamaño angular es proporcional a la frecuencia o proporción de esa categoría en relación con el total.

![](img/clipboard-2656977358.png){fig-align="center" width="590"}



![](img/clipboard-2247838254.png){fig-align="center" width="550"}

![](img/clipboard-1745598244.png){fig-align="center" width="550"}

### Diagrama de barras

Utiliza [**barras rectangulares para mostrar la frecuencia, la magnitud o la proporción de diferentes categorías**]{.hl-yellow}. Cada barra representa una categoría específica y su longitud es proporcional a la cantidad o frecuencia que representa. Es importante [**no confundir con un histograma**]{.hl-red}: en un diagrama de barras la anchura de cada barra es una decisión meramente estética (incluso si dejas o no un hueco entre cada barra).

También pueden ser útiles para representar variables cuantitativas discretas (e.g., número de hijos).

![](img//clipboard-3388298140.png){fig-align="center" width="400"}



### Diagrama de cajas

Un [**diagrama de cajas (boxplots)**]{.hl-yellow} es una representación gráfica que proporciona un resumen de varias características importantes de un conjunto de datos numéricos basado en **medidas de posición**.

El diagrama de cajas muestra la distribución de los datos a lo largo de un eje vertical, dividiendo el conjunto de datos en cuartiles y proporcionando información sobre la dispersión y la simetría de la distribución. Es importante tener en cuenta que en este gráfico, tanto la centralidad representada (mediana) como las medidas de posición (cuartiles) como los valores atípicos, se hace [**en relación a la mediana y no a la media**]{.hl-yellow}.

![](img/clipboard-2370668930.png){fig-align="center" width="477"}


Para realizarlos basta con usar `geom_boxplot()` como capa geométrica. Por ejemplo, vamos a realizar uno con la variable `height`

```{r}
#| code-fold: true
ggplot(starwars |> drop_na(height)) +
  geom_boxplot(aes(x = height)) +
  theme_minimal()
```


Podemos **invertir la posición de los boxplots** indicándole la variable `y` en lugar de `x`.

```{r}
#| code-fold: true
ggplot(starwars |> drop_na(height)) +
  geom_boxplot(aes(x = height)) +
  theme_minimal()
```


Podemos de nuevo incluir lo aprendido sobre atributos estéticos en estos gráficos. Por ejemplo, vamos a pintar un boxplot vertical (es decir `y = height`) por cada sexo (`x = sex`) distinguiendo los colores de cada uno.

```{r}
#| code-fold: true
ggplot(starwars |> drop_na(height, sex)) +
  geom_boxplot(aes(x = sex, y = height, fill = sex,
                   color = sex), alpha = 0.5) +
  ggthemes::scale_color_colorblind() +
  ggthemes::scale_fill_colorblind() +
  theme_minimal()
```

La función `geom_boxplot()` nos permite incluso [**distinguir outliers**]{.hl-yellow} en color, forma y tamaño (empiezan todos los parámetros por `outlier...`)

```{r}
#| code-fold: true
ggplot(starwars |> drop_na(height, sex)) +
  geom_boxplot(aes(x = sex, y = height, fill = sex,
                   color = sex), alpha = 0.5,
               outlier.alpha = 0.8, outlier.shape = 23,
               outlier.size = 2, outlier.color = "#d72020",
               outlier.fill = "#d72020") +
  ggthemes::scale_color_colorblind() +
  ggthemes::scale_fill_colorblind() +
  theme_minimal()
```


Dichos gráficos podemos combinarlos con un [**gotelé de las observaciones**]{.hl-yellow} haciendo uso de `geom_jitter()`, indicándole con `width = ...` la anchura del gotelé (a más valor, más disperso y confuso).

```{r}
#| code-fold: true
ggplot(starwars |> drop_na(height, sex),
       aes(x = sex, y = height, fill = sex, color = sex)) +
  geom_boxplot(alpha = 0.5, outlier.alpha = 0) +
  geom_jitter(width = 0.3) +
  ggthemes::scale_color_colorblind() +
  ggthemes::scale_fill_colorblind() +
  theme_minimal()
```

### Gráficos de violín

Los gráficos de cajas y bigotes o boxplot son una alternativa que mejora los clásicos gráficos dinámita o error bar plots (ver [**incovenientes de boxplots**](https://hausetutorials.netlify.app/posts/2019-02-22-why-we-should-never-use-barplots-use-geomquasirandom-instead/)), uno de los gráficos más habituales en artículos científicos en el ámbito de la bioinformática y bioestadística.

A pesar de que son una mejor alternativa que los error bar plots, en muchas ocasiones puede ser interesante acompañar a nuestros boxplot con lo que se conoce como [**gráficos de violín**]{.hl-yellow} (algo parecido a dos gráficos de densidad, uno pegado al otro de manera simétrica)

![](img/clipboard-943497861.png){fig-align="center" width="477"}


Para el gráfico de violín basta con `geom_violin()` 

```{r}
#| code-fold: true
ggplot(starwars |> drop_na(height, sex),
       aes(x = sex, y = height,
           fill = sex, color = sex)) +
  geom_violin(alpha = 0.5) +
  ggthemes::scale_color_colorblind() +
  ggthemes::scale_fill_colorblind() +
  theme_minimal()
```


Incluso puedes **combinarlo con un boxplot**

```{r}
#| code-fold: true
ggplot(starwars |> drop_na(height, sex),
       aes(x = sex, y = height,
           fill = sex, color = sex)) +
  geom_violin(alpha = 0.5) +
  geom_boxplot(alpha = 0.2, width = 0.2,
               outlier.alpha = 0.8) +
  ggthemes::scale_color_colorblind() +
  ggthemes::scale_fill_colorblind() +
  theme_minimal()
```

## Recursos para visualización

- [**Tipos de gráficos**]: <https://data-to-viz.com/>
- [**Gráficos en ggplot**]: <https://r-graph-gallery.com/>
- [**Hay vida más allá de los boxplots**]: <https://z3tt.github.io/beyond-bar-and-box-plots/>


- [**Selector de colores**]: <https://htmlcolorcodes.com/>
- [**Selector de colores desde captura**]: <https://imagecolorpicker.com/>


## 💻 Tu turno 

[**Intenta realizar los siguientes ejercicios sin mirar las soluciones**]{style="color:#444442;"}

::: panel-tabset
### [**Ejercicio 1**]{.hl-yellow}

📝 Toma el conjunto ya conocido de `starwars` del paquete `{dplyr}`. Realiza un diagrama de barras para contar las modalidades de la variable `sex` (solo eso, sin más opciones) eliminando antes los ausentes.

```{r}
#| code-fold: true
starwars |> 
  drop_na(sex) |> 
  ggplot() +
  geom_bar(aes(x = sex))
```

### [**Ejercicio 2**]{.hl-yellow}

📝 Añade lo que consideres del gráfico anterior para hacer que el relleno dependa de cada valor de `sex`. Personaliza tú los colores.

```{r}
#| code-fold: true
starwars |> 
  drop_na(sex) |> 
  ggplot() +
  geom_bar(aes(x = sex, fill = sex), alpha = 0.7) +
  scale_fill_manual(values = c("#3b9559", "#e29c4d", "#4265b0", "#b0428b"))
```

### [**Ejercicio 3**]{.hl-yellow}

📝 Añade lo que consideres del gráfico anterior para personalizar los títulos de los ejes, de la leyenda, poner un título al gráfico.

```{r}
#| code-fold: true
starwars |> 
  drop_na(sex) |> 
  ggplot() +
  geom_bar(aes(x = sex, fill = sex), alpha = 0.7) +
  scale_fill_manual(values = c("#3b9559", "#e29c4d", "#4265b0", "#b0428b")) +
  labs(x = "Sexo", y = "Frec. absoluta",
       title = "Distribución de sexo en personajes\nde Starwars",
       fill = "Sexo")
```

### [**Ejercicio 4**]{.hl-yellow}

📝 Añade lo que consideres del gráfico anterior para hacer que el eje y tenga una marca de 10 en 10 valores. Incluye un tema diferente al de por defecto

```{r}
#| code-fold: true
starwars |> 
  drop_na(sex) |> 
  ggplot() +
  geom_bar(aes(x = sex, fill = sex), alpha = 0.7) +
  scale_fill_manual(values = c("#3b9559", "#e29c4d", "#4265b0", "#b0428b")) +
  scale_y_continuous(breaks = seq(0, 60, by = 10)) +
  labs(x = "Sexo", y = "Frec. absoluta",
       title = "Distribución de sexo en personajes\nde Starwars",
       fill = "Sexo") +
  theme_minimal()
```

### [**Ejercicio 5**]{.hl-yellow}

📝 ¿Cómo podrías modificar el código anterior para que cada barra se divida en función de la variable género? Cada barra (para cada sexo) se dividirá en dos géneros: masculino y femenino.

```{r}
#| code-fold: true
#| code-line-numbers: "4-5"
starwars |> 
  drop_na(sex) |> 
  ggplot() +
  geom_bar(aes(x = sex, fill = gender), alpha = 0.7) +
  scale_fill_manual(values = c("#e29c4d", "#4265b0")) +
  scale_y_continuous(breaks = seq(0, 60, by = 10)) +
  labs(x = "Sexo", y = "Frec. absoluta",
       title = "Distribución de sexo y género\nen personajes de Starwars",
       fill = "Género") +
  theme_minimal()
```

### [**Ejercicio 6**]{.hl-yellow}

📝 Replica el gráfico del ejercicio 4 pero haciendo uso de las frecuencias relativas (cálculas antes para poder visualizarla)

```{r}
#| code-fold: true
starwars |> 
  drop_na(sex) |> 
  count(sex) |> 
  mutate("frec_rel" = n/sum(n)) |> 
  ggplot() +
  geom_col(aes(x = sex, y = frec_rel, fill = sex), alpha = 0.7) +
  scale_fill_manual(values = c("#3b9559", "#e29c4d", "#4265b0", "#b0428b")) +
  scale_y_continuous(breaks = seq(0, 0.9, by = 0.1)) +
  labs(x = "Sexo", y = "Frec. absoluta",
       title = "Distribución de sexo en\n personajes de Starwars",
       fill = "Sexo") +
  theme_minimal()
```

### [**Ejercicio 7**]{.hl-yellow}

📝 Visualiza un boxplot de la variable estatura distinguiendo por sexos

```{r}
#| code-fold: true
starwars |> 
  drop_na(height, sex) |> 
  ggplot() + # le decimos que los outlier
  geom_boxplot(aes(x = sex, y = height, color = sex, fill = sex), alpha = 0.5) +
  scale_color_manual(values = c("#3b9559", "#e29c4d", "#4265b0", "#b0428b")) +
  scale_fill_manual(values = c("#3b9559", "#e29c4d", "#4265b0", "#b0428b")) +
  guides(color = "none") + # para eliminar color de leyenda
  labs(x = "Sexo", y = "Estatura",
       title = "Distribución de la estatura vs sexo en\n personajes de Starwars",
       fill = "Sexo") +
  theme_minimal()
```



:::

## 🐣 Caso práctico: visualización covid

Vamos a practicar la visualización con la [**base de datos completa de covid del ISCIII**]{.hl-yellow} que vamos a cargar directamente desde la web: en lugar de poner la ruta del `.csv` de nuestro ordenador vamos a poder usar el link directamente (clickando con botón derecho del ratón en los archivos de <https://cnecovid.isciii.es/covid19/#documentaci%C3%B3n-y-datos>)

```{r}
library(readr)
datos <- read_csv(file = "https://cnecovid.isciii.es/covid19/resources/casos_hosp_uci_def_sexo_edad_provres.csv")
datos
```


### Pregunta 1

> Calcula en tidyverse un RESUMEN de tu tabla obteniendo el número de casos totales por fecha y sexo (es decir, sumando todos los casos para una fecha y un sexo dado, sin importar la provincia ni la edad)

```{r}
#| code-fold: true
library(tidyverse)
resumen <-
  datos |> 
  summarise("casos" = sum(num_casos), .by = c(fecha, sexo))
```

### Pregunta 2

> Usando el resumen anterior crea otro de manera que tengas el total de casos por fecha (sin importar el sexo)

```{r}
#| code-fold: true
resumen_total <-
  resumen |> 
  summarise("casos" = sum(casos), .by = fecha)
```

### Pregunta 3

> Con el dataset anterior, filtra entre 1 de marzo de 2020 y 30 de septiembre de 2020, y tras ello dibuja un diagrama de barras que nos visualice el número de casos por fecha

```{r}
#| code-fold: true
resumen_total |> 
  filter(between(fecha, as_date("2020-03-01"), as_date("2020-09-30"))) |> 
  ggplot() +
  geom_col(aes(x = fecha, y = casos))
```

### Pregunta 4

> Personaliza el gráfico anterior para que las marcas del eje y vayan de 1000 en 1000 casos. Personaliza también las etiquetas de los eje, título, subtítulo y pie de figura. Añade un tema.

```{r}
#| code-fold: true
resumen_total |> 
  filter(between(fecha, as_date("2020-03-01"), as_date("2020-09-30"))) |> 
  ggplot() +
  geom_col(aes(x = fecha, y = casos)) +
  scale_y_continuous(breaks = seq(0, 17000, by = 1000)) +
  labs(x = "Fecha", y = "Casos totales notificados",
       title = "Evolución del covid",
       subtitle = "Fechas: desde el 1 de marzo hasta el 30 de septiembre de 2020",
       caption = "Fuente: ISCIII") +
  theme_minimal()
```



### Pregunta 5

> Repite el gráfico anterior pero con el resumen inicial por sexo y fecha. Piensa como distinguir los casos notificados de cada sexo. Personaliza los colores que uses.

```{r}
#| code-fold: true
resumen |> 
  filter(between(fecha, as_date("2020-03-01"), as_date("2020-09-30"))) |> 
  ggplot() +
  geom_col(aes(x = fecha, y = casos, fill = sexo),
           alpha = 0.5) +
  scale_y_continuous(breaks = seq(0, 17000, by = 1000)) +
  ggthemes::scale_fill_colorblind() +
  labs(x = "Fecha", y = "Casos totales notificados",
       title = "Evolución del covid",
       subtitle = "Fechas: desde el 1 de marzo hasta el 30 de septiembre de 2020",
       caption = "Fuente: ISCIII",
       fill = "sexo") +
  theme_minimal()
```


### Pregunta 6

> Guarda la gráfica anterior en una variable. Con la capa `theme()` podemos, con una gráfica ya hecha, modificar cada elemento de su tema. Por ejemplo, investiga `theme(legend.position = ...)` para poner la leyenda debajo de la gráfica en lugar de la derecha.

```{r}
#| code-fold: true
grafica <-
  resumen |> 
  filter(between(fecha, as_date("2020-03-01"), as_date("2020-09-30"))) |> 
  ggplot() +
  geom_col(aes(x = fecha, y = casos, fill = sexo),
           alpha = 0.5) +
  scale_y_continuous(breaks = seq(0, 17000, by = 1000)) +
  ggthemes::scale_fill_colorblind() +
  labs(x = "Fecha", y = "Casos totales notificados",
       title = "Evolución del covid",
       subtitle = "Fechas: desde el 1 de marzo hasta el 30 de septiembre de 2020",
       caption = "Fuente: ISCIII",
       fill = "sexo") +
  theme_minimal()

grafica +
  theme(legend.position = "bottom")
```

### Pregunta 7

> Convierte la gráfica anterior a gráfica interactiva con el paquete `{plotly}`

```{r}
#| code-fold: true
#| eval: false
plotly::ggplotly(grafica)
```

### Pregunta 8

> Con el resumen por fecha y sexo, visualiza la distribución de casos diarios mediante un boxplot (uno por cada sexo). Marca los outliers de manera diferenciada.

```{r}
#| code-fold: true
resumen |> 
  filter(between(fecha, as_date("2020-03-01"), as_date("2020-09-30"))) |> 
  ggplot() +
  geom_boxplot(aes(x = sexo, y = casos, color = sexo, fill = sexo),
               alpha = 0.5, outlier.alpha = 0.9, outlier.shape = 23,
               outlier.size = 2.5, outlier.fill = "#900000") +
  ggthemes::scale_color_colorblind() +
  ggthemes::scale_fill_colorblind() +
  labs(x = "Sexo", y = "Casos diarios notificados",
       title = "Evolución del covid",
       subtitle = "Fechas: desde el 1 de marzo hasta el 30 de septiembre de 2020",
       caption = "Fuente: ISCIII") +
  theme_minimal()
```

