---
title: "Primeras bases de datos"
subtitle: "Cuadernos pr√°cticos del M√°ster de Bioinform√°tica (curso 2024-2025)"
author: "Javier √Ålvarez Li√©bana"
format:
  html:
    theme: [default, style.scss]
    toc: true
    toc-title: √çndice
    toc-depth: 5
    toc-location: left
    number-sections: true
embed-resources: true
execute: 
  echo: true
---

```{r}
#| echo: false
setwd(dir = getwd())
```


## Primeras base de datos

Cuando analizamos datos solemos tener [**varias variables**]{.hl-yellow} de cada individuo: necesitamos una ¬´tabla¬ª que las recopile.

### Primer intento: matrices

La opci√≥n m√°s inmediata son las [**matrices**]{.hl-yellow}: concatenaci√≥n de variables del [**mismo tipo e igual longitud**]{.hl-purple}.

Imagina que tenemos estaturas y pesos de 4 personas. ¬øC√≥mo [**crear un dataset con las dos variables**]{.hl-yellow}?

&nbsp;

La opci√≥n m√°s habitual es usando `cbind()`: [**concatenamos (bind) vectores en forma de columnas (c)**]{.hl-yellow}

```{r}
#| code-line-numbers: "3"
estaturas <- c(150, 160, 170, 180)
pesos <- c(63, 70, 85, 95)
datos_matriz <- cbind(estaturas, pesos)
datos_matriz
```


Tambi√©n podemos [**construir la matriz por filas**]{.hl-yellow} con la funci√≥n `rbind()` (concatenar - bind - por filas  - rows), aunque lo [**recomendable es tener cada variable en columna**]{.hl-green} e individuo en fila como luego veremos.

```{r}
rbind(estaturas, pesos) # Construimos la matriz por filas
```

- Podemos [**¬´visualizar¬ª la matriz**]{.hl-yellow} con `View(matriz)`.


-   Podemos [**comprobar las dimensiones**]{.hl-yellow} con `dim()`, `nrow()` y `ncol()`: las matrices son un tipo de **datos tabulados** (organizados en filas y columnas)

```{r}
dim(datos_matriz)
nrow(datos_matriz)
ncol(datos_matriz)
```


Tambi√©n podemos [**¬´darle vuelta¬ª (matriz transpuesta)**]{.hl-yellow} con `t()`.

```{r}
t(datos_matriz)
```

Dado que ahora tenemos dos dimensiones en nuestros datos, para [**acceder a elementos con `[]`**]{.hl-yellow} deberemos proporcionar **dos √≠ndices separados por comas**: √≠ndice de la fila y de la columna 

```{r}
datos_matriz[2, 1] # segunda fila, primera columna
datos_matriz[1, 2] # primera fila, segunda columna 
```


En algunas casos querremos obtener los [**datos totales de un individuo**]{.hl-yellow} (una fila concreta pero todas las columnas) o los valores de [**toda una variable**]{.hl-yellow} para todos los individuos (una columna concreta pero todas las filas). Para ello dejaremos [**sin rellenar uno de los √≠ndices**]{.hl-yellow}

```{r}
datos_matriz[2, ] # segundo individuo
datos_matriz[, 1] # primera variable
```


Mucho de lo aprendido con vectores podemos hacerlo con matrices, as√≠ podemos por ejemplo acceder a varias filas y/o columnas haciendo uso de las [**secuencias de enteros 1:n**]{.hl-yellow}

```{r}
datos_matriz[c(1, 3), 1] # primera variable para el primer y tercer individuo
```


Tambi√©n podemos definir una [**matriz a partir de un vector num√©rico**]{.hl-yellow}, reorganizando los valores en forma de matriz (sabiendo que los elementos se van [**colocando por columnas**]{.hl-purple}).

```{r}
z <- matrix(1:9, ncol = 3) 
z
```

Incluso podemos [**definir una matriz de valores constantes**]{.hl-yellow}, por ejemplo de ceros (para luego rellenar)

```{r}
matrix(0, nrow = 2, ncol = 3)
```



#### Operaciones con matrices

Con las matrices sucede como con los vectores: cuando aplicamos una [**operaci√≥n aritm√©tica lo hacemos elemento a elemento**]{.hl-yellow}

```{r}
z/5
```



Para realizar [**operaciones en un sentido matricial**]{.hl-yellow} deberemos a√±adir `%%`, por ejemplo, para multiplicar matrices ser√° `%*%`


```{r}
z * t(z)
z %*% t(z)
```


Tambi√©n podemos [**realizar operaciones por columnas/filas**]{.hl-yellow} sin recurrir a bucles con la funci√≥n `apply()`, y le indicaremos como **argumentos**

-   la matriz
-   el sentido de la operaci√≥n (`MARGIN = 1` por filas, `MARGIN = 2` por columnas)
-   la funci√≥n a aplicar
- argumentos extra que necesite la funci√≥n

Por ejemplo, para aplicar una media a cada variable, ser√° `mean` aplicada con `MARGIN = 2` (misma funci√≥n para cada columna)

```{r}
# Media (mean) por columnas (MARGIN = 2)
apply(datos_matriz, MARGIN = 2, FUN = "mean")
```


### üíª Tu turno (matrices)

[**Intenta realizar los siguientes ejercicios sin mirar las soluciones**]{style="color:#444442;"}

::: panel-tabset

### [**Ejercicio 1**]{.hl-yellow}

üìù Modifica el c√≥digo inferior para definir una matriz `x` de unos, de 3 filas y 7 columnas.

```{r}
#| eval: false
x <- matrix(0, nrow = 2, ncol = 3)
x
```

```{r}
#| code-fold: true
#| eval: false
x <- matrix(1, nrow = 3, ncol = 7)
x
```

### [**Ejercicio 2**]{.hl-yellow}

üìù A la matriz anterior, suma un 1 a cada n√∫mero de la matriz y divide el resultado entre 5. Tras ello calcula su transpuesta

```{r}
#| code-fold: true
#| eval: false
new_matrix <- (x + 1)/5
t(new_matrix)
```

### [**Ejercicio 3**]{.hl-yellow}

üìù ¬øPor qu√© el c√≥digo inferior nos devuelve dicho mensaje de aviso?

```{r}
#| warning: TRUE
matrix(1:15, nrow = 4)
```



### [**Ejercicio 4**]{.hl-yellow}

üìù Define la matriz `x <- matrix(1:12, nrow = 4)`. Tras ello obt√©n los datos del primer individuo, los datos de la tercera variable, y el elemento `(4, 1)`.

```{r}
#| code-fold: true
#| eval: false
x <- matrix(1:12, nrow = 4)
x[1, ] # primera fila
x[, 3] # tercera columna
x[4, 1] # elemento (4, 1)
```

### [**Ejercicio 5**]{.hl-yellow}

üìù Define una matriz de 2 variables y 3 individuos tal que cada variable capture la estatura y la edad 3 personas, de manera que la edad de la segunda persona sea desconocida (ausente). Tras ello calcula la media de cada variable (¬°nos debe de volver un n√∫mero!)

```{r}
#| code-fold: true
#| eval: false
datos <- cbind("edad" = c(20, NA, 25), "estatura" = c(160, 165, 170))
apply(datos, MARGIN = 2, FUN = "mean", na.rm = TRUE) # media por columnas

```

### [**Ejercicio 6**]{.hl-yellow}

üìù ¬øPor qu√© devuelve error el c√≥digo inferior? ¬øQu√© est√° mal?

```{r}
#| error: true
matriz <- cbind("edad" = c(15, 20, 25), "nombres" = c("javi", "sandra", "carlos"))
matriz
matriz + 1
```

:::

### Segundo intento: data.frame

Las matrices tienen el mismo problema que los vectores: si juntamos datos de distinto tipo, se [**perturba la integridad del dato**]{.hl-red} ya que los convierte (f√≠jate en el c√≥digo inferior: las edades y los `TRUE/FALSE` los ha convertido a texto)

```{r}
#| code-line-numbers: "4-5"
edades <- c(14, 24, NA)
soltero <- c(TRUE, NA, FALSE)
nombres <- c("javi", "laura", "luc√≠a")
matriz <- cbind(edades, soltero, nombres)
matriz
```

De hecho al no ser n√∫meros ya no podemos realizar operaciones aritm√©ticas

```{r}
#| error: true
matriz + 1
```

Para poder trabajar con [**variables de distinto tipo**]{.hl-yellow} tenemos en `R` lo que se conoce como [**data.frame**]{.hl-yellow}: concatenaci√≥n de variables de igual longitud pero que pueden ser de [**tipo distinto**]{.hl-purple}.

```{r}
tabla <- data.frame(edades, soltero, nombres)
class(tabla)
tabla
```

Dado que un `data.frame` es ya un intento de ¬´base de datos¬ª las variables no son meros vectores matem√°ticos: [**tienen un significado**]{.hl-yellow} y podemos (debemos) [**ponerles nombres**]{.hl-purple} que describan su significado

```{r}
library(lubridate)
tabla <-
  data.frame("edad" = edades, "estado" = soltero, "nombre" = nombres,
             "f_nacimiento" = as_date(c("1989-09-10", "1992-04-01", "1980-11-27")))
tabla
```


[**¬°TENEMOS NUESTRO PRIMER CONJUNTO DE DATOS!**]{.hl-yellow} (estrictamente no podemos hablar de base de datos pero de momento como lo si fuesen). Puedes visualizarlo escribiendo su nombre en consola o con `View(tabla)`

![](img/view_tabla.jpg)


#### Acceso a variables

Si queremos acceder a sus elementos, al ser de nuevo **datos tabulados**, podemos acceder como en las matrices ([**no recomendable**]{.hl-red}): de nuevo [**tenemos dos √≠ndices**]{.hl-yellow} (filas y columnas, dejando libre la que no usemos)

```{r}
tabla[2, ]  # segunda fila (todas sus variables)
tabla[, 3]  # tercera columna (de todos los individuos)
tabla[2, 1]  # primera caracter√≠stica de la segunda persona
```


::: columns
::: {.column width="25%"}
![](img/menu_data_frame.jpg)
:::

::: {.column width="75%"}
Pero tambi√©n tiene las ventajas de una [**¬´base¬ª de datos**]{.hl-yellow} : podemos [**aceder a las variables por su nombre**]{.hl-purple} ([**lo recomendable**]{.hl-green} ya que las variables pueden cambiar de posici√≥n y ahora s√≠ tienen un significado), poniendo el nombre de la tabla seguido del s√≠mbolo `$` (con el **tabulador**, nos aparecer√° un men√∫ de columnas a elegir)
:::
:::


#### Funciones de consulta

-   `names()`: nos muestra los nombres de las variables

```{r}
names(tabla)
```


-   `dim()`: nos muestra las dimensiones (tambi√©n `nrow()` y `ncol()`)

```{r}
dim(tabla)
```


-   Podemos acceder a las variables por su nombre

```{r}
tabla[c(1, 3), "nombre"]
tabla$nombre[c(1, 3)]
```



#### A√±adir variable

Si tenemos uno ya creado y queremos [**a√±adir una columna**]{.hl-yellow} es tan simple como usar la funci√≥n `data.frame()` que ya hemos visto para concatenar la columna. Vamos a√±adir por ejemplo una nueva variable, el n√∫mero de hermanos de cada individuo.

```{r}
# A√±adimos una nueva columna con n¬∫ de hermanos/as
hermanos <- c(0, 2, 3)
tabla <- data.frame(tabla, "n_hermanos" = hermanos)
tabla
```



### Intento final: tibble

Las tablas en formato `data.frame` tienen algunas [**limitaciones**]{.hl-red}. La principal es que [**no permite la recursividad**]{.hl-red}: imagina que definimos una base de datos con estaturas y pesos, y queremos una tercera variable con el IMC

```{r}
#| error: true
data.frame("estatura" = c(1.7, 1.8, 1.6), "peso" = c(80, 75, 70),
           "IMC" = peso / (estatura^2))
```


En adelante usaremos el formato `tibble` ([**data.frame mejorado**]{.hl-yellow}) del paquete `{tibble}`

```{r}
library(tibble)
datos_tb <- 
  tibble("estatura" = c(1.7, 1.8, 1.6), "peso" = c(80, 75, 70), "IMC" = peso / (estatura^2))
class(datos_tb)
datos_tb
```


```{r}
datos_tb <-
  tibble("estatura" = c(1.7, 1.8, 1.6), "peso" = c(80, 75, 70), "IMC" = peso / (estatura^2))
datos_tb
```

Las tablas en formato `tibble` nos permitir√° una [**gesti√≥n m√°s √°gil, eficiente y coherente**]{.hl-yellow} de los datos, con 4 ventajas principales:

-   [**Metainformaci√≥n**]{.hl-yellow}: si te fijas en la cabecera, nos dice ya autom√°ticamente el n√∫mero de filas y columnas, y el tipo de cada variable


-   [**Recursividad**]{.hl-yellow}: permite definir las variables secuencialmente (como hemos visto)


-   [**Consistencia**]{.hl-yellow}: si accedes a una columna que no existe avisa con un warning

```{r}
#| warning: true
datos_tb$invent
```

-   [**Por filas**]{.hl-yellow}: crear por filas (copiar y pegar de una tabla) con `tribble()`

```{r}
tribble(~colA, ~colB,
        "a",   1,
        "b",   2)
```



::: callout-tip
El paquete `{datapasta}` nos permite [**copiar y pegar**]{.hl-green} tablas de p√°ginas web y documentos sencillos
:::

### üíª Tu turno (tb/df) {#tu-turno-3-3}

[**Intenta realizar los siguientes ejercicios sin mirar las soluciones**]{style="color:#444442;"}

::: panel-tabset

### [**Ejercicio 1**]{.hl-yellow}

üìù Carga del paquete `{datasets}` el conjunto de datos `airquality` (variables de la calidad del aire de Nueva York desde mayo hasta septiembre de 1973). ¬øEs el conjunto de datos airquality de tipo tibble? En caso negativo, convi√©rtelo a tibble (busca en la documentaci√≥n del paquete en <https://tibble.tidyverse.org/index.html>).

```{r}
#| code-fold: true
#| eval: false
library(tibble)
class(datasets::airquality)
airquality_tb <- as_tibble(datasets::airquality)
```

### [**Ejercicio 2**]{.hl-yellow}

üìù Una vez convertido a `tibble` obt√©n el nombre de las variables y las dimensiones del conjunto de datos. ¬øCu√°ntas variables hay? ¬øCu√°ntos d√≠as se han medido?

```{r}
#| code-fold: true
#| eval: false
names(airquality_tb)
ncol(airquality_tb)
nrow(airquality_tb)
```


### [**Ejercicio 3**]{.hl-yellow}

üìù Filtra solo los datos de la quinta observaci√≥n

```{r}
#| code-fold: true
#| eval: false
airquality_tb[5, ]
```

### [**Ejercicio 4**]{.hl-yellow}

üìù Filtra solo los datos del mes de agosto. ¬øC√≥mo indicarle que queremos solo las filas que cumplan una condici√≥n concreta? (pista: en realidad todo son vectores "formateados")

```{r}
#| code-fold: true
#| eval: false
airquality_tb[airquality_tb$Month == 8, ]
```

### [**Ejercicio 5**]{.hl-yellow}

üìù Selecciona aquellos datos que no sean ni de julio ni de agosto.

```{r}
#| code-fold: true
#| eval: false
airquality_tb[airquality_tb$Month != 7 & airquality_tb$Month != 8, ]
airquality_tb[!(airquality_tb$Month %in% c(7, 8)), ]
```

### [**Ejercicio 6**]{.hl-yellow}

üìù Modifica el siguiente c√≥digo para quedarte solo con las variable de ozono y temperatura (sin importar qu√© posici√≥n ocupen)

```{r}
#| eval: false
airquality_tb[, 3]
```

### [**Ejercicio 7**]{.hl-yellow}

üìù Selecciona los datos de temperatura y viento de agosto. 

```{r}
#| code-fold: true
#| eval: false
airquality_tb[airquality_tb$Month == 8, c("Temp", "Wind")]
```

### [**Ejercicio 8**]{.hl-yellow}

üìù Traduce a castellano el nombre de las variables.


```{r}
#| code-fold: true
#| eval: false
names(airquality_tb) <- c("ozono", "rad_solar", "viento", "temp", "mes", "dia") 
```

:::



## üê£ Caso pr√°ctico I: pinniped dataset

Del paquete `{Biostatistics}` usaremos el conunto de datos `pinniped`, que guarda los datos de peso de cuerpo y cerebro (desagregado por sexo y mono/poligamia) de 33 especies de mam√≠feros marinos.


```{r}
Biostatistics::pinniped
```

### Pregunta 1

> Comprueba si los datos est√°n en formato tibble. En caso negativo convi√©rtelo.

```{r}
#| eval: false
#| code-fold: true

# chequeamos si es tibble
library(tibble)
is_tibble(Biostatistics::pinniped)

# Convertimos a tibble
pinniped_tb <- as_tibble(Biostatistics::pinniped)
```

### Pregunta 2

> ¬øCu√°ntos registros hay? ¬øCu√°ntas variables? ¬øDe qu√© tipo es cada una? ¬øCu√°les son sus nombres?


```{r}
#| code-fold: true
#| eval: false
nrow(pinniped_tb)
ncol(pinniped_tb)
names(pinniped_tb)
```

### Pregunta 3

> Incorpora una variable nueva llamada `phoca` que sea de tipo l√≥gico y que nos diga si una especie es de la categor√≠a `Phoca` o no.

```{r}
#| code-fold: true
#| eval: false
# tienes m√°s funcionalidades con textos del paquete stringr
# arriba en el workbook
pinniped_tb$phoca <- str_detect(pinniped_tb$Species == "Phoca")
```

### Pregunta 4

> ¬øA qu√© sexo le pesa m√°s el cerebro: a las hembras o a los machos?

```{r}
#| code-fold: true
#| eval: false

# ¬øa qui√©n le pesa m√°s el cerebro?
mean(pinniped_tb$Male_brain_g, na.rm = TRUE) >
  mean(pinniped_tb$Female_brain_g, na.rm = TRUE)
```

### Pregunta 5

> ¬øA quienes les pesa m√°s el cuerpo a los mon√≥gamos o a los pol√≠gamos? Recuerda que tienes los pesos divididos por sexos en variables distintas que tendr√°s que juntar de alguna forma

```{r}
#| code-fold: true
#| eval: false

# ¬øa qui√©n le pesa m√°s el cerebro?
mean(c(pinniped_tb$Male_mass_Kg[pinniped_tb$Mate_type == "mono"],
       pinniped_tb$Female_mass_Kg[pinniped_tb$Mate_type == "mono"])) >
  mean(c(pinniped_tb$Male_mass_Kg[pinniped_tb$Mate_type == "poly"],
         pinniped_tb$Female_mass_Kg[pinniped_tb$Mate_type == "poly"]))
```


### Pregunta 6

> Incopora una nueva variable llamada `dif_m_f` que represente la diferencia entre el peso del cerebro entre machos y hembras (machos - hembras) para cada especie.

```{r}
#| code-fold: true
#| eval: false
pinniped_tb$dif_m_f <- pinniped_tb$Male_brain_g - pinniped_tb$Female_brain_g
pinniped_tb
```

## üê£ Caso pr√°ctico II: an√°lisis de Taylor Swift

![](https://media.giphy.com/media/2tg4k9pXNcGi7kZ9Pz/giphy.gif)

### Pregunta 1

> Instala el paquete `{taylor}` EN LA CONSOLA y tras ello c√°rgalo

```{r}
# SIEMPRE EN CONSOLA
# install.packages("taylor")
library(taylor)
```

> En dicho paquete tenemos el dataset `taylor_album_songs` con las caracter√≠sticas de las canciones de √°lbum de Taylor Swift (se excluyen canciones fuera de √°lbumes y solo se consideran las canciones de su propiedad). Haz que aparezca el dataset en el documento.

```{r}
#| code-fold: true
#| eval: false
taylor_album_songs
```

### Pregunta 2

> ¬øCu√°ntas canciones hay guardadas? ¬øCu√°ntas caracter√≠sticas (variables) hay guardadas de cada una?

```{r}
#| code-fold: true
#| eval: false
ncol(taylor_album_songs)
nrow(taylor_album_songs)
```


### Pregunta 3

> Obt√©n el nombre de los √°lbumes (√∫nicos) que hay contenidos en el dataset. ¬øCu√°ntos hay?

```{r}
#| code-fold: true
#| eval: false
unique(taylor_album_songs$album_name)
length(unique(taylor_album_songs$album_name))
```

### Pregunta 4

> ¬øEn cu√°ntas canciones hay una colaboraci√≥n con otro artista? Si hay colaboraci√≥n, su nombre viene guardado en `featuring`


```{r}
#| code-fold: true
#| eval: false
# Si nos preguntan por canciones (es decir, registros en este caso) bastar√≠a con
# saber hay colaboraciones donde no hay NA, as√≠ que me basta con contar los NA
sum(!is.na(taylor_album_songs$featuring))

# Si me preguntasen por aristas √∫nicos (sin contar repetidos) ser√≠a
# quitar antes los NA (para que no los cuente como un artista m√°s)
# y eliminar colaboradores repetidos
length(unique(taylor_album_songs$featuring[!is.na(taylor_album_songs$featuring)]))
```


### Pregunta 5

> Crea un nuevo `tibble` solo con las variables `album_name`, `album_release`, `track_name`, `featuring` y `duration_ms`. Tras ello ordena por fecha de m√°s reciente a m√°s antigua

```{r}
#| code-fold: true
#| eval: false
nuevo_tb <-
  taylor_album_songs[, c("album_name", "album_release", "track_name",
                         "featuring", "duration_ms")]
nuevo_tb[order(nuevo_tb$album_release, decreasing = TRUE), ]
```

### Pregunta 6

> A√±ade al anterior dataset dos nuevas variables con el mes y a√±o de lanzamiento (usa la variable `album_release`). ¬øEn qu√© mes ha lanzado m√°s √°lbumes?

```{r}
#| code-fold: true
#| eval: false
library(lubridate)
nuevo_tb$mes <- month(nuevo_tb$album_release)
nuevo_tb$year <- year(nuevo_tb$album_release)

# opci√≥n corta
table(nuevo_tb$mes)

# opci√≥n larga
sum(nuevo_tb$mes == 1)
sum(nuevo_tb$mes == 2)
sum(nuevo_tb$mes == 3)
# ....
sum(nuevo_tb$mes == 12)
```

### Pregunta 7

> Obt√©n la media de duraci√≥n de las canciones en minutos (variable `duration_ms` est√° en milisegundos). Extrae todos los datos de la canci√≥n que m√°s dura (toda su fila).



```{r}
#| code-fold: true
#| eval: false
# Pasamos los milisegundos a minutos y luego la media excluyendo NA
mean(nuevo_tb$duration_ms / 60000, na.rm = TRUE)

# primero quitamos las que tiene duraci√≥n ausente
nuevo_tb <- nuevo_tb[!is.na(nuevo_tb$duration_ms), ]

# Para obtener los datos de la canci√≥n que m√°s dura tenemos 3 opciones:

# 1. extrayendo aquella canci√≥n cuya duraci√≥n coincida con el m√°ximo
nuevo_tb[nuevo_tb$duration_ms == max(nuevo_tb$duration_ms), ]

# 2. ordenando de m√°s duraci√≥n a menos y qued√°ndonos con la primera fila
nuevo_tb[order(nuevo_tb$duration_ms, decreasing = TRUE), ][1, ]

# 3. con `which.max()` (en lugar de devolver el m√°ximo nos devuelve la posici√≥n donde est√°)
nuevo_tb[which.max(nuevo_tb$duration_ms), ]
```


## üê£ Caso pr√°ctico III: salto de longitud (practicando textos)

Para practicar textos y tibbles vamos a usar el dataset `salto_longitud.csv` que tienes guardado en la carpeta de datos, que guarda c√≥mo ha **progresado el r√©cord de salto de longitud masculino**. Dicha tabla ha sido extra√≠da directamente de la wikipedia <https://en.wikipedia.org/wiki/Men%27s_long_jump_world_record_progression#Low_altitude_record_progression_1965%E2%80%931991>

![](./img/men-long-jump.png)

```{r}
load(file = "./datos/salto_longitud.RData")
```

Aunque no forma parte del curso, puedes ver debajo si quieres el **c√≥digo que se ha usado para extraer la tabla directamente de la wikipedia**

```{r}
#| code-fold: true
#| eval: false
library(rvest)
library(tidyverse)
wiki_jump <- 'https://en.wikipedia.org/wiki/Men%27s_long_jump_world_record_progression'
long_jump <- read_html(wiki_jump)
salto_longitud <- html_table(html_node(long_jump, 'table'))
```



### Pregunta 1

> ¬øCu√°ntos registros hay? ¬øCu√°ntas variables? ¬øDe qu√© tipo es cada una? ¬øCu√°les son sus nombres? ¬øQu√© crees que significan?


```{r}
#| code-fold: true
#| eval: false
nrow(salto_longitud)
ncol(salto_longitud)
names(salto_longitud)

# tenemos 19 r√©cords y 5 variables: la marca (en metros, pies y pulgadas), el viento que hac√≠a, la persona que bati√≥ el record, el lugar y la fecha.
```



### Pregunta 2

> Crea una nueva variable llamada `Mark` (sustituye a la anterior) en la que hayas extra√≠do la marca en metros (y convertida a n√∫mero). Pr√°ctica antes con un valor de juguete, por ejemplo, si tuvi√©semos `x <- "7.61 m (24 ft 11+1/2 in)", ¬øc√≥mo podr√≠amos quedarnos solo con la marca en metros?


```{r}
#| code-fold: true
#| eval: false

# Sabemos que el patr√≥n es 1 n√∫mero, un ., y dos decimales, as√≠ que
# usamos str_extract para extraer ese patr√≥n que le indicamos
# con una expresi√≥n regular.
salto_longitud$Mark <-
  str_extract(salto_longitud$Mark, pattern = "[0-9][.][0-9]{2}")

# Tras ello convertimos a n√∫mero
salto_longitud$Mark <- as.numeric(salto_longitud$Mark)

# importante: ahora en la cabecera debajo de mark pone <dbl>, es un n√∫mero
salto_longitud 
```

### Pregunta 3

> Crea una nueva variable llamada `Wind` (sustituye la original) en la que tengas el viento convertido a n√∫mero. 


```{r}
#| code-fold: true
#| eval: false
salto_longitud$Wind <- as.numeric(salto_longitud$Wind)
salto_longitud
```

> ¬øEn cu√°ntos r√©cords no hab√≠a viento? ¬øEn cu√°ntos no tenemos registros de dicha medida?

```{r}
#| code-fold: true
#| eval: false

# Con viento 0
sum(salto_longitud$Wind == 0, na.rm = TRUE)

# Sin registros
sum(is.na(salto_longitud$Wind))

# importante: ausente y 0 no es lo mismo
```

### Pregunta 4

> Crea una nueva variable llamada `country` que extraiga las siglas de los pa√≠ses de la variable `Athlete`

```{r}
#| code-fold: true
#| eval: false
# Primero extraemos con los par√©ntesis (es m√°s f√°cil detectarlo)
salto_longitud$country <-
  str_extract(salto_longitud$Athlete, pattern = "[(][A-Z]{3}[)]")

# Luego los eliminamos los ( y los ) (de ah√≠ la barra vertical en medio)
# F√≠jate que para que entienda que es un caracter especial (par√©ntesis)
# se lo pasamos como \\( y como \\). Ppasar√≠a lo mismo si queremos detectar,
# por ejemplo, un punto, con \\.
salto_longitud$country <- str_remove_all(salto_longitud$country, "\\(|\\)")
```



### Pregunta 5

> Ordena la tabla por orden alfab√©tico de las siglas

```{r}
#| code-fold: true
#| eval: false
salto_longitud <- salto_longitud[order(salto_longitud$country), ]
```

### Pregunta 6

> Reemplaza la variable `Date` por la fecha correcta en formato fecha


```{r}
#| code-fold: true
#| eval: false

# primero eliminamos todos los [?]
salto_longitud$Date <-
  str_remove_all(salto_longitud$Date, pattern = "\\[[0-9]{1}\\]")

# luego atendemos el caso particualr de [note 1]
salto_longitud$Date <-
  str_remove_all(salto_longitud$Date, pattern = "\\[note 1\\]")

# tras depurar convertimos a fecha
salto_longitud$Date <- dmy(salto_longitud$Date)
salto_longitud
```

### Pregunta 7

> ¬øCu√°ntos r√©cords no son de Estados Unidos? ¬øQu√© porcentaje representa respecto al total?

```{r}
#| code-fold: true
#| eval: false

# total absoluto
sum(salto_longitud$country != "USA")

# porcentaje relativo
100*sum(salto_longitud$country != "USA") / length(salto_longitud$country)
```


### Pregunta 8

> Para cada r√©cord, calcula los metros de mejora respecto al anterior, y gu√°rdalo en la base de datos. Pista: prueba bien la funci√≥n `diff()` y chequea la longitud de lo que te devuelve.

```{r}
#| code-fold: true
#| eval: false

# Usamos la funci√≥n diff que, dado un vector, calcula las diferencias
# f√≠jate que el primero no conocemos la mejora (ya que no hay registro previo)
salto_longitud$mejora <- c(NA, diff(salto_longitud$Mark))
```

