rearrange(absolute = TRUE) |>
shave()
mtcars |>
correlate() |>
focus(mpg, cyl, wt) |>
shave()
mtcars |>
correlate() |>
shave() |>
fashion()
mtcars |>
correlate() |>
network_plot(min_cor = 0.7)
library(corrplor)
library(corrplot)
mtcars |>
cor() |>
corrplot()
set.seed(12345)
x <- rnorm(n = 1e6, mean = 0, sd = 0.5)
y <- rnorm(n = 1e6, mean = 0, sd = 0.5)
cor(x, y)
[**Moraleja**]{.hl-yellow}: covarianza nula [**NO IMPLICA**]{.hl-red} independencia (independencia si implica, en particular, ausencia de relación lineal)
set.seed(12345)
x <- rnorm(n = 1e6, mean = 0, sd = 0.5)
y <- x^2
cor(x, y)
set.seed(12345)
x <- rnorm(n = 1e6, mean = 0, sd = 0.5)
y <- 2*x
cor(x, y)
seq(0.001, 5, l = 1000)
seq(0.001, 5, by = 0.001)
length(seq(0.001, 5, by = 0.001))
length(seq(0.01, 5, by = 0.001))
length(seq(0.01, 5, by = 0.01))
set.seed(12345)
x <- rnorm(n = 1e6, mean = 0, sd = 0.5)
sigmas <- length(seq(0.01, 5, by = 0.01))
correlations <- tibble("sigmas" = sigmas, "cor" = NA)
for (i in 1:length(sigmas)) {
y <- 2*x + sigmas[i]
correlations$cor[i] <- cor(x, y)
}
ggplot(correlations, aes(x = sigma, y = cor)) +
geom_point(aes(color = sigma), size = 3, alpha = 0.7)
ggplot(correlations, aes(x = sigmas, y = cor)) +
geom_point(aes(color = sigmas), size = 3, alpha = 0.7)
correlations
set.seed(12345)
x <- rnorm(n = 1e6, mean = 0, sd = 0.5)
sigmas <- seq(0.01, 5, by = 0.01)
correlations <- tibble("sigmas" = sigmas, "cor" = NA)
for (i in 1:length(sigmas)) {
y <- 2*x + sigmas[i]
correlations$cor[i] <- cor(x, y)
}
ggplot(correlations, aes(x = sigmas, y = cor)) +
geom_point(aes(color = sigmas), size = 3, alpha = 0.7)
length(sigmas)
length(seq(0.01, 5, by = 0.05))
length(seq(0.01, 5, by = 0.025))
set.seed(12345)
x <- rnorm(n = 1e6, mean = 0, sd = 0.5)
sigmas <- seq(0.01, 5, by = 0.025)
correlations <- tibble("sigmas" = sigmas, "cor" = NA)
for (i in 1:length(sigmas)) {
y <- 2*x + sigmas[i]
correlations$cor[i] <- cor(x, y)
}
correlations
correlations |> View()
set.seed(12345)
x <- rnorm(n = 1e6, mean = 0, sd = 0.5)
sigmas <- seq(0.01, 5, by = 0.05)
correlations <- tibble("sigmas" = sigmas, "cor" = NA)
for (i in 1:length(sigmas)) {
y <- 2*x + rnorm(n = 1e6, mean = 0, sd = sigmas[i])
correlations$cor[i] <- cor(x, y)
}
ggplot(correlations, aes(x = sigmas, y = cor)) +
geom_point(aes(color = sigmas), size = 3, alpha = 0.7)
length(seq(0.01, 5, by = 0.05))
length(seq(0.01, 10, by = 0.05))
seq(0.01, 10, by = 0.1)
length(seq(0.01, 10, by = 0.1))
set.seed(12345)
x <- rnorm(n = 1e6, mean = 0, sd = 0.5)
sigmas <- seq(0.01, 10, by = 0.1)
correlations <- tibble("sigmas" = sigmas, "cor" = NA)
for (i in 1:length(sigmas)) {
y <- 2*x + rnorm(n = 1e6, mean = 0, sd = sigmas[i])
correlations$cor[i] <- cor(x, y)
}
ggplot(correlations, aes(x = sigmas, y = cor)) +
geom_point(aes(color = sigmas), size = 2.5, alpha = 0.7) +
theme_minimal()
length(seq(0.005, 10, by = 0.05))
seq(0.005, 10, by = 0.05)[1:10]
set.seed(12345)
x <- rnorm(n = 1e6, mean = 0, sd = 0.5)
sigmas <- seq(0.005, 20, by = 0.05)
correlations <- tibble("sigmas" = sigmas, "cor" = NA)
for (i in 1:length(sigmas)) {
y <- 2*x + rnorm(n = 1e6, mean = 0, sd = sigmas[i])
correlations$cor[i] <- cor(x, y)
}
i
set.seed(12345)
x <- rnorm(n = 1e6, mean = 0, sd = 0.5)
sigmas <- seq(0.005, 20, l = 100)
correlations <- tibble("sigmas" = sigmas, "cor" = NA)
for (i in 1:length(sigmas)) {
y <- 2*x + rnorm(n = 1e6, mean = 0, sd = sigmas[i])
correlations$cor[i] <- cor(x, y)
}
ggplot(correlations, aes(x = sigmas, y = cor)) +
geom_point(aes(color = sigmas), size = 3, alpha = 0.7) +
theme_minimal()
set.seed(12345)
x <- rnorm(n = 1e6, mean = 0, sd = 0.5)
sigmas <- seq(0.001, 15, l = 200)
correlations <- tibble("sigmas" = sigmas, "cor" = NA)
for (i in 1:length(sigmas)) {
y <- 2*x + rnorm(n = 1e6, mean = 0, sd = sigmas[i])
correlations$cor[i] <- cor(x, y)
}
ggplot(correlations, aes(x = sigmas, y = cor)) +
geom_point(aes(color = sigmas), size = 3, alpha = 0.7) +
theme_minimal()
set.seed(12345)
x <- rnorm(n = 1e6, mean = 0, sd = 0.5)
sigmas <- seq(0.0001, 10, l = 100)
correlations <- tibble("sigmas" = sigmas, "cor" = NA)
for (i in 1:length(sigmas)) {
y <- 2*x + rnorm(n = 1e6, mean = 0, sd = sigmas[i])
correlations$cor[i] <- cor(x, y)
}
ggplot(correlations, aes(x = sigmas, y = cor)) +
geom_point(aes(color = sigmas), size = 3, alpha = 0.7) +
theme_minimal()
ggplot(correlations, aes(x = sigmas, y = cor)) +
geom_point(aes(color = sigmas), size = 3, alpha = 0.7) +
labs(title = "Correlación vs ruido",
color = "sd ruido")
theme_minimal()
ggplot(correlations, aes(x = sigmas, y = cor)) +
geom_point(aes(color = sigmas), size = 3, alpha = 0.7) +
labs(title = "Correlación vs ruido",
color = "sd ruido") +
theme_minimal()
set.seed(12345)
x <- rnorm(n = 1e5, mean = 0, sd = 0.5)
sigmas <- seq(0.0001, 10, l = 100)
correlations <- tibble("sigmas" = sigmas, "cor" = NA)
for (i in 1:length(sigmas)) {
# vamos añadiendo ruido y calculamos la correlación
y <- 2*x + rnorm(n = 1e5, mean = 0, sd = sigmas[i])
correlations$cor[i] <- cor(x, y)
}
ggplot(correlations, aes(x = sigmas, y = cor)) +
geom_point(aes(color = sigmas), size = 3, alpha = 0.7) +
labs(title = "Correlación vs ruido",
x = "sigma", y = "correlación",
color = "sd ruido") +
theme_minimal()
mtcars |> correlate() |> focus(mpg)
datos <- read_csv(file = "./datos/wine.csv")
datos
datos |>
correlate() |>
focus(Price)
datos |>
correlate() |>
focus(Price)
set.seed(12345)
x <- rnorm(n = 1e6, mean = 0, sd = 0.5)
y <- rnorm(n = 1e6, mean = 0, sd = 0.5)
cov(x, y)
set.seed(12345)
x <- rnorm(n = 1e6, mean = 0, sd = 0.5)
y <- x^2
cov(x, y)
set.seed(12345)
x <- rnorm(n = 1e6, mean = 0, sd = 0.5)
y <- 2*x
cov(x, y)
y <- -2*x
cov(x, y)
#| message: false
#| warning: false
library(tidyverse)
starwars |>
select(where(is.numeric)) |> # importante: solo numéricas
drop_na() |> # importante: covarianza de ausentes --> ausente
cov()
#| message: false
#| warning: false
library(tidyverse)
starwars |>
select(where(is.numeric)) |> # importante: solo numéricas
drop_na() |> # importante: correlación de ausentes --> ausente
cor()
#| message: false
#| warning: false
library(tidyverse)
# Correlación
starwars |>
select(where(is.numeric)) |>
drop_na() |>
cor()
# Covarianza con datos estandarizados
starwars |>
select(where(is.numeric)) |>
drop_na() |>
mutate(across(everything(), function(x) { (x - mean(x))/sd(x) })) |>
cov()
library(corrr)
mtcars |>
correlate()
# Filtramos solo las correlaciones respecto a 3 variables
mtcars |>
correlate() |>
filter(term %in% c("mpg", "disp", "gear"))
# Si queremos predecir mpg, filtramos aquellas variables que tienen una correlación (en valor absoluto) superior a 0.7
mtcars |>
correlate() |>
filter(abs(mpg) > 0.7)
mtcars |>
correlate(diag = 1)
mtcars |>
correlate() |>
focus(mpg, cyl)
mtcars |>
correlate() |>
focus(-(mpg:drat), mirror = TRUE)
mtcars |>
correlate() |>
rearrange(absolute = TRUE)
mtcars |>
correlate() |>
rearrange(absolute = TRUE) |>
shave()
mtcars |>
correlate() |>
shave() |>
fashion()
mtcars |>
correlate() |>
network_plot(min_cor = 0.7)
library(corrplot)
mtcars |>
cor() |>
corrplot()
set.seed(12345)
x <- rnorm(n = 1e6, mean = 0, sd = 0.5)
y <- rnorm(n = 1e6, mean = 0, sd = 0.5)
cor(x, y)
set.seed(12345)
x <- rnorm(n = 1e6, mean = 0, sd = 0.5)
y <- x^2
cor(x, y)
set.seed(12345)
x <- rnorm(n = 1e6, mean = 0, sd = 0.5)
y <- 2*x
cor(x, y)
set.seed(12345)
x <- rnorm(n = 1e5, mean = 0, sd = 0.5)
sigmas <- seq(0.0001, 10, l = 100)
correlations <- tibble("sigmas" = sigmas, "cor" = NA)
for (i in 1:length(sigmas)) {
# vamos añadiendo ruido y calculamos la correlación
y <- 2*x + rnorm(n = 1e5, mean = 0, sd = sigmas[i])
correlations$cor[i] <- cor(x, y)
}
ggplot(correlations, aes(x = sigmas, y = cor)) +
geom_point(aes(color = sigmas), size = 3, alpha = 0.7) +
labs(title = "Correlación vs ruido",
x = "sigma", y = "correlación",
color = "sd ruido") +
theme_minimal()
library(tidyverse)
anscombe_tb <- as_tibble(datasets::anscombe)
anscombe_tb
anscombe_x <-
anscombe_tb |>
pivot_longer(cols = x1:x4, names_to = "dataset", values_to = "x") |>
select(-contains("y")) |>
mutate(dataset = str_remove_all(dataset, "x"))
anscombe_y <-
anscombe_tb |>
pivot_longer(cols = y1:y4, names_to = "dataset", values_to = "y") |>
select(-contains("x"), -dataset)
anscombe_tidy <-
anscombe_x |> mutate("y" = anscombe_y$y)
anscombe_tidy
anscombe_tidy |>
summarise(mean_x = mean(x), mean_y = mean(y),
var_x = var(x), var_y = var(y),
sd_x = sd(x), sd_y = sd(y),
cov = cov(x, y), cor = cor(x, y), .by = dataset)
ggplot(anscombe_tidy) +
geom_point(aes(x = x, y = y, color = dataset), size = 3, alpha = 0.7) +
ggthemes::scale_color_colorblind() +
facet_wrap(~dataset) +
theme_minimal()
library(datasauRus)
datasaurus_dozen |>
summarise(mean_x = mean(x), mean_y = mean(y),
var_x = var(x), var_y = var(y),
sd_x = sd(x), sd_y = sd(y),
cov = cov(x, y), cor = cor(x, y), .by = dataset)
ggplot(datasaurus_dozen |>
filter(dataset != "wide_lines"),
aes(x = x, y = y, color = dataset)) +
geom_point(size = 2.5, alpha = 0.75) +
geom_smooth(method = "lm", se = FALSE)  +
facet_wrap(~dataset, ncol = 3) +
theme_minimal()
datos <- read_csv(file = "./datos/wine.csv")
datos
library(skimr)
datos |> skim()
datos_tidy <-
datos |>
pivot_longer(cols = everything(), names_to = "variable", values_to = "values")
ggplot(datos_tidy, aes(x = values)) +
geom_density(aes(color = variable, fill = variable),
alpha = 0.75) +
ggthemes::scale_color_colorblind() +
ggthemes::scale_fill_colorblind() +
facet_wrap(~variable, scales = "free") +
theme_minimal()
ggplot(datos_tidy, aes(x = values)) +
geom_histogram(aes(color = variable, fill = variable),
alpha = 0.75, bins = 10) +
ggthemes::scale_color_colorblind() +
ggthemes::scale_fill_colorblind() +
facet_wrap(~variable, scales = "free") +
theme_minimal()
ggplot(datos_tidy, aes(y = values, x = variable)) +
geom_boxplot(aes(color = variable, fill = variable),
alpha = 0.75) +
ggthemes::scale_color_colorblind() +
ggthemes::scale_fill_colorblind() +
facet_wrap(~variable, scales = "free") +
theme_minimal()
#| code-fold: true
library(ggforce)
ggplot(datos) +
geom_point(aes(x = .panel_x, y = .panel_y)) +
facet_matrix(vars(everything())) +
ggthemes::scale_color_colorblind() +
ggthemes::scale_fill_colorblind() +
theme_minimal()
#| code-fold: true
library(GGally)
ggpairs(datos) +
theme_minimal()
datos |>
correlate() |>
fashion()
datos |>
correlate() |>
network_plot(min_cor = 0.5)
datos |>
correlate() |>
focus(Price)
datos |>
correlate()
datos |>
correlate() |>
focus(Price)
datos |>
correlate()
mtcars |>
cor() |>
corrplot(method = "ellipse", type = "lower")
mtcars |>
cor() |>
corrplot(type="upper", col = brewer.pal(n = 8, name = "PuOr"))
library(RColorBrewer)
mtcars |>
cor() |>
corrplot(type="upper", col = brewer.pal(n = 8, name = "PuOr"))
cor.mtest(mtcars)
cor.test
? cor.test
cor_test <-
mtcars |>
cor.mtest()
cor_test$p
mtcars |>
corrplot(p.mat = cor_test$p, sig.level = 0.01)
mtcars |>
cor() |>
corrplot(p.mat = cor_test$p, sig.level = 0.01)
mtcars |>
cor() |>
corrplot(method = "color", p.mat = cor_test$p, sig.level = 0.05,
addCoef.col = "black") # añado coeficientes de correlación
rm(list = ls()) # Borramos variables de environment
# descomentar si es la primera vez (y requieren instalación)
# install.packages("tidyverse")
# install.packages("corrr")
# install.packages("corrplot")
library(tidyverse)
library(corrr)
library(corrplot)
# no cambies código
datos <- read_csv(file = "./cancer_reg.csv")
datos |> cor() |> corrplo(method = "color")
datos |> cor() |> corrplot(method = "color")
datos |> cor()
datos
datos |> View()
datos |> select(where(is.numeric)) |> cor() |> corrplot(method = "color")
datos |> select(where(is.numeric)) |> cor() |> corrplot(method = "color")
datos |> select(where(is.numeric)) |> cor() |> corrplot(method = "color")
datos |> select(where(is.numeric)) |> correlate() |> focus(TARGET_deathRate)
datos |> select(where(is.numeric)) |> correlate() |> focus(TARGET_deathRate) |> View()
datos_preproc <-
datos |>
rename(deathRate = TARGET_deathRate) |>
select(deathRate, incidenceRate, medianIncome, popEst2015,
povertyPercent, studyPerCap, MedianAge, Geography,
AvgHouseholdSize, PercentMarried, PctHS18_24, PctHS25_Over,
PctUnemployed16_Over, PctPrivateCoverage, PctEmpPrivCoverage,
PctPublicCoverage, PctMarriedHouseholds, BirthRate)
datos_preproc <-
datos |>
rename(deathRate = TARGET_deathRate) |>
select(deathRate, incidenceRate, medIncome, popEst2015,
povertyPercent, studyPerCap, MedianAge, Geography,
AvgHouseholdSize, PercentMarried, PctHS18_24, PctHS25_Over,
PctUnemployed16_Over, PctPrivateCoverage, PctEmpPrivCoverage,
PctPublicCoverage, PctMarriedHouseholds, BirthRate)
datos_preproc |> select(where(is.numeric)) |> correlate() |> focus(deathRate) |> View()
datos_preproc <-
datos |>
rename(deathRate = TARGET_deathRate) |>
select(deathRate, medIncome, popEst2015,
povertyPercent, studyPerCap, MedianAge, Geography,
AvgHouseholdSize, PercentMarried, PctHS18_24, PctHS25_Over,
PctUnemployed16_Over, PctPrivateCoverage, PctEmpPrivCoverage,
PctPublicCoverage, PctMarriedHouseholds, BirthRate)
datos_preproc |> select(where(is.numeric)) |> corrplot()
datos_preproc |> select(where(is.numeric)) |> cor() |> corrplot()
datos_preproc |> select(where(is.numeric)) |> cor() |> corrplot()
datos_preproc |> select(where(is.numeric)) |> correlate() |> focus(deathRate) |> View()
write_csv(datos_preproc, file = "./cancer.csv")
datos_preproc <-
datos |>
rename(deathRate = TARGET_deathRate) |>
select(deathRate, medIncome, popEst2015,
povertyPercent, studyPerCap, MedianAge, Geography,
AvgHouseholdSize, PercentMarried, PctHS18_24, PctHS25_Over,
PctUnemployed16_Over, PctPrivateCoverage, PctEmpPrivCoverage,
PctPublicCoverage, BirthRate)
datos_preproc
write_csv(datos_preproc, file = "./cancer.csv")
ajuste <- lm(data = datos_preproc, formula = deathRate ~ povertyPercent)
ajuste |> summary()
library(performance)
check_model(ajuste)
# no cambies código
datos <- read_csv(file = "./cancer.csv")
#| message: false
#| warning: false
rm(list = ls()) # Borramos variables de environment
# descomentar si es la primera vez (y requieren instalación)
# install.packages("tidyverse")
# install.packages("performance")
# install.packages("olsrr")
# install.packages("corrr")
# install.packages("corrplot")
library(tidyverse)
library(performance)
library(olsrr)
library(corrr)
library(corrplot)
# no cambies código
datos <- read_csv(file = "./cancer.csv")
# no cambies código
datos <- read_csv(file = "./cancer.csv")
datos
datos |> skimr::skim()
ajuste <- lm(data = datos_preproc |> slice_sample(prop = 0.8), formula = deathRate ~ povertyPercent)
ajuste <- lm(data = datos |> slice_sample(prop = 0.8), formula = deathRate ~ povertyPercent)
predict(ajuste, datos)
[Escribe en el chunk el código que consideres para responder la pregunta y aquí debajo como texto normal lo que consideres para responder, borrando esta frase]
datos_preproc <- datos |> select(-PctPublicCoverage, -PctEmpPrivCoverage, -PctHS18_24)
write_csv(datos_preproc, file = "./entregas/ENTREGA 1/cancer.csv")
3202*3
9893 / 3202
3.089631*31
3.089631*30
11139/3
10500/3
2900*3
10738 / 3
(2900*3 + 1246)
(3202*3 + 1246)
(2800*3 + 1246)
2900*3 + 1246
9900 / 3
9000 / 3
(9000 + 1246)/3
(8800 + 1200)/3
(8600 + 1200)/3
(8500 + 1200)/3
(8500 + 1200)/3
