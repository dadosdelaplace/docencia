---
title: "Introducci√≥n a R base"
subtitle: "Cuadernos pr√°cticos de Software II del Grado en Ciencia de Datos Aplicada (curso 2024-2025)"
author: "Javier √Ålvarez Li√©bana"
format:
  html:
    theme: [default, style.scss]
    toc: true
    toc-title: √çndice
    toc-depth: 5
    toc-location: left
    number-sections: true
embed-resources: true
execute: 
  echo: true
---

## Introducci√≥n a R (base)

### Requisitos iniciales

#### R

Si es la primera vez que usas `R` (¬°bienvenido/a!) antes vas a necesitar, con [**conexi√≥n a internet**]{.hl-yellow} (tambi√©n lo necesitar√°s para la descarga de algunos datos y paquetes), [**instalar R**]{.hl-yellow}

![](img/cranR.jpg){width="420"}

Como sucede cuando escribimos un idioma (castellano, por ejemplo), `R` ser√° nuestro [**lenguaje**]{.hl-yellow} y nuestra [**gram√°tica**]{.hl-yellow}, en definitiva, nuestras reglas de juego.

Para su instalaci√≥n necesitar√°s seguir los siguientes pasos:

- [**Paso 1**]{.hl-yellow}: entra en <https://cran.r-project.org/> y selecciona tu sistema operativo.

-   [**Paso 2**]{.hl-yellow}: para Mac basta con que hacer click en el **archivo .pkg**, y abrirlo una vez descargado. Para sistemas Windows, debemos clickar en **install R for the first time** y despu√©s en **Download R for Windows**. Una vez descargado, abrirlo como cualquier archivo de instalaci√≥n.

-   [**Paso 3**]{.hl-yellow}: abrir el ejecutable de instalaci√≥n.

::: callout-warning

Siempre que tengas que descargar algo de CRAN (ya sea el propio R o un paquete), [**aseg√∫rate de tener conexi√≥n a internet**]{.hl-orange}.

:::


Para comprobar que se ha instalado correctamente, tras abrir `R`, deber√≠as ver el `R GUI`(Graphical User Interface), y en √©l, una **pantalla blanca** similar a esta: se llama [**consola**]{.hl-yellow} y podemos hacer un primer uso de ella como una **calculadora**.

![](img/consola.jpg){width="260"}

Para empezar vamos a generar nuestro [**primer c√≥digo**]{.hl-yellow}: a una variable llamada `a` le **asignaremos** el valor `1` (escribiremos el c√≥digo de abajo en la consola y daremos ¬´enter¬ª)

```{r}
#| code-line-numbers: "1"
a <- 1
```

Tras ello definiremos otra variable llamada `b` y le **asignaremos** el valor `2`

```{r}
#| code-line-numbers: "2"
a <- 1
b <- 2
```

Tras definir ambas variables haremos la suma `a + b` y nos devolver√° su resultado

```{r}
#| code-line-numbers: "3"
a <- 1
b <- 2
a + b
```


::: callout-note

## F√≠jate que...

En `R` [**asignaremos valores**]{.hl-yellow} con `<-` como una flecha: la variable a la izquierda de dicha flecha le asignamos el valor que hay a la derecha (por ejemplo, `a <- 1`)

:::

::: callout-note

## F√≠jate que...

En la consola aparece un n√∫mero `[1]`: simplemente es un contador de elementos (como contar filas en un Word)

:::


#### RStudio

No es obligatorio pero si recomendable trabajar en un IDE (entorno de desarrollo), algo parecido a un [**Word**]{.hl-yellow} para escribir castellano, y ese ser√° el `RStudio`. Para [**instalar RStudio**]{.hl-yellow} debes seguir los siguientes pasos

-   [**Paso 1**]{.hl-yellow}: entra la [web oficial de RStudio](https://posit.co/download/rstudio-desktop/) (ahora llamado Posit) y selecciona la descarga gratuita.

-   [**Paso 2**]{.hl-yellow}: selecciona el ejecutable que te aparezca acorde a tu sistema operativo.

-   [**Paso 3**]{.hl-yellow}: tras descargar el ejecutable, hay que abrirlo como otro cualquier otro y dejar que termine la instalaci√≥n.


![](img/rstudio.jpg){width="420"}


Al abrir `RStudio` seguramente tengas tres ventanas:

-   [**Consola**]{.hl-yellow}: es el nombre para llamar a la ventana grande que te ocupa buena parte de tu pantalla. Prueba a escribir el mismo c√≥digo que antes (la suma de las variables) en ella. La consola ser√° donde **ejecutaremos √≥rdenes y mostraremos resultados**.

![](img/consola_rstudio.jpg){width="420"}


-   [**Environment**]{.hl-yellow}: la pantalla peque√±a (puedes ajustar los m√°rgenes con el rat√≥n a tu gusto) que tenemos en la parte superior derecha. Nos mostrar√° las **variables que tenemos definidas**.

![](img/environment.jpg){width="420"}

-   [**Panel multiusos**]{.hl-yellow}: la ventana que tenemos en la parte inferior derecha no servir√° para buscar **ayuda de funciones**, adem√°s de para **visualizar gr√°ficos**.

![](img/multiusos.jpg){width="420"}


### Idea fundamental: paquetes

Una de las ideas claves de `R` es el [**uso de paquetes**]{.hl-yellow}: c√≥digos que otras personas han implementado para **resolver un problema**


![](img/paquetes.png)

Con los paquetes podemos hacer dos cosas: instalarlos o usarlos.

-   [**Instalaci√≥n**]{.hl-yellow}: descargamos los c√≥digos de la web (necesitamos internet) ‚Üí [**comprar un libro**]{.hl-purple}, solo una vez (por ordenador)

```{r}
#| eval: false
install.packages("ggplot2")
```

-   [**Carga**]{.hl-yellow}: con el paquete descargado, indicamos qu√© paquetes queremos usar cada vez que abramos `RStudio` ‚Üí [**traer el libro de la estanter√≠a**]{.hl-purple} (usando el nombre del paquete sin comillas)

```{r}
#| eval: false
library(ggplot2)
```

Tambi√©n podemos hacer uso solo de [**funciones concretas**]{.hl-yellow}: usando `paquete::funcion` le √≠ndicamos que solo queremos una [**p√°gina concreta de ese libro**]{.hl-purple}

```{r}
#| eval: false
ggplot2::geom_point()
```

### Mensajes de error


Durante tu aprendizaje va a ser muy habitual que las cosas no salgan a la primera ‚Üí [**te vas equivocar**]{.hl-yellow}. No solo ser√° importante asumirlo sino que es [**importante leer los mensajes de error**]{.hl-yellow} para aprender de ellos.

-   [**Mensajes de error**]{.hl-red}: precedidos de **¬´Error in...¬ª** y ser√°n aquellos fallos que [**impidan la ejecuci√≥n**]{.hl-red}

```{r}
#| error: true
"a" + 1 
```

-   [**Mensajes de warning**]{.hl-orange}: precedidos de **¬´Warning in...¬ª** son los (posibles) fallos m√°s delicados ya que son incoherencias que [**no impiden la ejecuci√≥n**]{.hl-orange}

```{r}
#| warning: true
# Ejecuta la orden pero el resultado es NaN, **Not A Number**, un valor que no existe
sqrt(-1)
```


### Scripts y proyectos


![](img/abrir_script.jpg){width="350"}

Por √∫ltimo, vamos a mencionar el concepto de [**script**]{.hl-yellow}: el documento en el que programamos, nuestro archivo `.doc` (aqu√≠ con extensi√≥n `.R`) donde escribiremos las √≥rdenes. Para **abrir nuestro primero script**, haz click en el men√∫ en `File < New File < R Script`.

::: callout-warning

## Cuidado

Es importante **no abusar de la consola**: todo lo que no escribas en un script, cuando cierres, [**lo habr√°s perdido**]{.hl-orange}.

:::


::: callout-warning
## Cuidado

`R` es [**case-sensitive**]{.hl-orange}: es sensible a may√∫sculas y min√∫sculas por lo que `x` y `X` representa variables distintas.

:::



Una vez creado el script tenemos una **cuarta ventana** en `RStudio`: la ventana donde [**escribiremos nuestros c√≥digos**]{.hl-yellow}. ¬øC√≥mo ejecutarlo?


1.  **Escribimos** el c√≥digo a ejecutar.

2.  **Guardamos** el archivo .R haciendo click en `Save current document`.

3.  El c√≥digo no se ejecuta salvo que se lo indiquemos. Tenemos **tres opciones de ejecutar un script**:

-   [**Copiar y pegar**]{.hl-yellow} en consola.
-   [**Seleccionar l√≠neas**]{.hl-yellow} y `Ctrl+Enter`
-   [**Activar Source on save**]{.hl-yellow} a la derecha de guardar: no solo guarda sino que ejecuta el c√≥digo **completo**.

#### Proyectos

De la misma manera que en el ordenador solemos trabajar de manera [**ordenada por carpetas**]{.hl-yellow}, en `RStudio` podemos hacer lo mismo para trabajar de [**manera eficaz creando proyectos**]{.hl-yellow}.


Un [**proyecto ser√° una ¬´carpeta¬ª**]{.hl-yellow} dentro de `RStudio`, de manera que nuestro directorio ra√≠z autom√°ticamente ser√° la propia carpeta de proyecto (pudiendo pasar de un proyecto a otro con el menu superior derecho). Podemos crear uno en una carpeta nueva o en una carpeta ya existente.

![](img/rstudio_proyectos.png){width="370"}


### üíª Ejercicios

::: panel-tabset
### [**Ejercicio 1**]{.hl-yellow}

üìù Crea en tu ordenador una carpeta de la asignatura y crea dentro de ella el proyecto de `RStudio`: es ah√≠ donde vas a guardar todo lo que hagamos a lo largo de este curso.Tras crear el proyecto tendr√°s un archivo `R Project`. A continuaci√≥n crea en dicha carpeta dos subcarpetas: `datos` (es ah√≠ donde ir√°s guardando los distintos datasets que usaremos) y `scripts` (es ah√≠ donde ir√°s guardando los archivos `.R` de cada clase)

### [**Ejercicio 2**]{.hl-yellow}

üìù Dentro del proyecto crea un script `ejercicios-clase1.R` (dentro de la carpeta `scripts`). Una vez creado define en √©l una variable de nombre `a` y cuyo valor sea -1. Ejecuta el c√≥digo de las 3 maneras explicadas.

```{r}
#| code-fold: true
a <- -1
```

### [**Ejercicio 3**]{.hl-yellow}

üìù A√±ade debajo otra l√≠nea para definir una variable `b` con el valor 5. Tras ello guarda la multiplicaci√≥n de ambas variables. Ejecuta el c√≥digo como consideres.

```{r}
#| code-fold: true
#| eval: false
b <- 5
a * b # sin guardar
multiplicacion <- a * b # guardado
```

### [**Ejercicio 4**]{.hl-yellow}

üìù Modifica el c√≥digo inferior para definir dos variables c y d, con valores 3 y -1. Tras ello divide las variables y guarda el resultado.

```{r}
#| eval: false
c <- # deber√≠as asignarle el valor 3
d <- # deber√≠as asignarle el valor -1
```

```{r}
#| code-fold: true
#| eval: false
c <- 3
d <- -1
c / d # sin guardar
division <- c / d # guardado
```

### [**Ejercicio 5**]{.hl-yellow}

üìù Asigna un valor positivo a `x` y calcula su ra√≠z cuadrada; asigna otro negativo `y` y calcula su valor absoluto con la funci√≥n `abs()`.

```{r}
#| code-fold: true
#| eval: false
x <- 5
sqrt(x)

y <- -2
abs(y)
```

::: callout-note
## Toma nota

Comandos como `sqrt()`, `abs()` o `max()` son lo que llamamos [**funciones**]{.hl-purple}: l√≠neas de c√≥digo que hemos ¬´encapsulado¬ª bajo un nombre, y dado unos argumentos de entrada, ejecuta las √≥rdenes (una especie de atajo). En las funciones los [**argumentos ir√°n SIEMPRE entre par√©ntesis**]{.hl-yellow}
:::


### [**Ejercicio 6**]{.hl-yellow}

üìù Usando la variable `x` ya definida, completa/modifica el c√≥digo inferior para guardar en una nueva variable `z` el resultado guardado en `x` menos 5.

```{r}
#| eval: false
z <- ? - ? # completa el c√≥digo
z
```

```{r}
#| code-fold: true
#| eval: false
z <- x - 5
z
```

### [**Ejercicio 7**]{.hl-yellow}

üìù Define una variable `x` y as√≠gnale el valor `-1`. Define otra `y` y as√≠gnale el valor `0`. Tras ello realiza las operaciones a) `x` entre `y`; b) ra√≠z cuadrada de `x`. ¬øQu√© obtienes?



```{r}
#| code-fold: true
#| eval: false
x <- -1
y <- 0

x / y
sqrt(x)
```

### [**Ejercicio 8**]{.hl-yellow}

üìù Escribe el c√≥digo inferior en tu script. ¬øPor qu√© crees que no funciona?


```{r}
#| error: true
x <- -1
y <- 0

X + y
```

:::

## Primeros tipos de datos

Dado que es un curso de `R` orientado a ciencia de datos (normalmente con datos tabulados en tablas), la primera pregunta que quiz√°s nos hagamos es

> Dada una tabla, ¬øqu√© [**tipo de dato**]{.hl-yellow} podemos tener en cada celda?

![](img/celdas.jpg)

La idea del curso es ir de lo concreto (celda individual) a lo general (tablas y listas)

-   [**Celda**]{.hl-yellow}: dato individual de un tipo concreto.
-   [**Variable**]{.hl-yellow}: **concatenaci√≥n** de valores del mismo tipo ([**vectores en R**]{.hl-purple}).
-   [**Matriz**]{.hl-yellow}: concatenaci√≥n de variables del **mismo tipo y longitud**.
-   [**Tabla**]{.hl-yellow}: concatenaci√≥n de variables de [**distinto tipo pero igual longitud**]{.hl-purple}
-   [**Lista**]{.hl-yellow}: concatenaci√≥n de variables de [**distinto tipo y distinta longitud**]{.hl-purple}
:::

### Tipos de datos individuales

Y aunque la mayor√≠a de veces tendemos a pensar que solo guardamos y trabajamos con n√∫meros, ¬øexisten [**variables m√°s all√° de los n√∫meros en la ciencia de datos**]{.hl-yellow}?

Piensa por ejemplo en los datos que podr√≠as guardar de una persona:

-   La edad o el peso ser√° un [**n√∫mero**]{.hl-yellow}.

```{r}
edad <- 33
```

-   Su nombre ser√° una cadena de [**texto (conocida como string o char)**]{.hl-yellow}.

```{r}
nombre <- "javi"
```

-   A la pregunta ¬´¬øest√°s matriculado en la Facultad?¬ª la respuesta ser√° lo que llamamos una [**variable l√≥gica**]{.hl-yellow} (`TRUE` si est√° matriculado o `FALSE` en otro caso).

```{r}
matriculado <- TRUE
```
 
-   Su fecha de nacimiento ser√° precisamente eso, una [**fecha**]{.hl-yellow} (veremos como definirlas un poco m√°s adelante).


#### Variables num√©ricas

El dato m√°s sencillo (ya lo hemos usado) ser√°n las [**variables num√©ricas**]{.hl-yellow}


```{r}
a <- 5
b <- 2
a + b
```

Para saber la [**clase de dato en R**]{.hl-yellow}  de una variable tenemos la funci√≥n `class()`

```{r}
class(a)
```

Para saber su [**tipolog√≠a (naturaleza o formato)**]{.hl-yellow} variable tenemos `typeof()`

```{r}
typeof(1) # 1 pero almacenado como un valor real (double, con decimales)
typeof(as.integer(1)) # 1 pero almacenado como un entero.
```

::: callout-note
## F√≠jate que...

En `R` tenemos una colecci√≥n de funciones que empiezan por `as.x()` y que sirven como [**funciones de conversi√≥n**]{.hl-yellow}: un dato que era de un tipo, lo convertimos a tipo `x`.

:::


Adem√°s de los n√∫meros ¬´normales¬ª tendremos el [**valor m√°s/menos infinito**]{.hl-yellow} codificado como `Inf` o `-Inf`

```{r}
1/0
```

```{r}
-1/0
```


Y tambi√©n aparecer√°n a menudo valores que [**no son n√∫meros reales**]{.hl-yellow}, definidos como _not a number_ (indeterminaciones, complejos, etc), y codificados como `NaN`

```{r}
0/0
```

```{r}
#| warning: true
sqrt(-2)
```


&nbsp;

Con las variables num√©ricas podemos realizar las [**operaciones aritm√©ticas**]{.hl-yellow} de una calculadora: sumar (`+`)...

```{r}
a + b
```

...ra√≠z cuadrada (`sqrt()`)...

```{r}
sqrt(a)
```


... potencias (`^2`, `^3`)...

```{r}
a^2
```


...valor absoluto (`abs()`), etc.

```{r}
abs(a)
```


#### Variables de texto

Imagina que adem√°s de la edad de una persona queremos guardar su nombre: ahora la variable ser√° de tipo `character`

```{r}
nombre <- "Javier"
class(nombre)
```

Las [**cadenas de texto**]{.hl-yellow} son un tipo con el que obviamente [**no podremos hacer operaciones aritm√©ticas**]{.hl-red} (s√≠ otras operaciones como pegar o localizar patrones).

```{r}
#| error: true
nombre + 1 # error al sumar n√∫mero a texto
```

::: callout-warning
## Recuerda que...

Las variables de tipo texto (character o string) van [**SIEMPRE entre comillas**]{.hl-orange}: no es lo mismo `TRUE` (valor l√≥gico, binario) que `"TRUE"` (texto).
:::

Y aunque no podamos aplicar a las cadenas de texto operaciones aritm√©ticas habituales si podremos aplicar otras operaciones, como por ejemplo, la funci√≥n `paste()`. Como hemos comentado `R` llamaremos [**funci√≥n**]{.hl-yellow} a un trozo de [**c√≥digo encapsulado**]{.hl-yellow} bajo un nombre, y que depende de unos [**argumentos**]{.hl-yellow} de entrada.

Nuestra primera funci√≥n `paste()` toma dos cadenas de texto y nos permite pegarlas.

```{r}
paste("Javier", "√Ålvarez")
```


F√≠jate que [**por defecto**]{.hl-yellow} nos pega las cadenas con un espacio, pero podemos a√±adir un [**argumento opcional**]{.hl-yellow} para indicarle el separador (en `sep = ...`). 

```{r}
paste("Javier", "√Ålvarez", sep = "*")
```


¬øC√≥mo saber [**qu√© argumentos necesita una funci√≥n**]{.hl-yellow}? Escribiendo en consola `? paste` te aparecer√° una [**ayuda**]{.hl-yellow} en el panel multiusos.


![](img/paste_help.jpg)

En dicha ayuda podr√°s ver en su cabecera que argumentos ya tiene [**asignados por defecto**]{.hl-yellow} la funci√≥n. Los argumentos (y su detalle) tambi√©n pueden ser consultado **tabulando (detr√°s de una coma)**.

![](img/tab-functions.png)


&nbsp;

Existe una funci√≥n similar llamada `paste0()` que pega por defecto con `sep = ""` (sin nada).

```{r}
paste0("Javier", "√Ålvarez")
```


Es muy importante entender el concepto de [**argumento por defecto de una funci√≥n**]{.hl-yellow} en `R`: es un valor que la funci√≥n usa pero a veces podemos no ver porque [**ya tiene un valor asignado**]{.hl-yellow}. 

```{r}
# Hacen lo mismo
paste("Javier", "√Ålvarez")
paste("Javier", "√Ålvarez", sep = " ")
```


::: callout-note
## Toma nota

El operador `=` lo [**reservaremos para asignar argumentos**]{.hl-yellow} dentro de funciones. Para todas las dem√°s asignaciones usaremos `<-`
:::

Otra forma de concatenar cadenas de texto (m√°s intuitiva) es usar el paquete `{glue}`: lo primero que haremos ser√° ¬´comprar el libro¬ª (si nunca lo hemos hecho). Tras ello [**cargamos el paquete**]{.hl-yellow}

```{r}
#| eval: false
install.packages("glue") # solo la primra vez
library(glue)
```

```{r}
#| echo: false
library(glue)
```


Con la funci√≥n `glue()` de dicho paquete podemos usar [**variables dentro de cadenas de texto**]{.hl-yellow}. Por ejemplo, ¬´la edad es de ... a√±os¬ª, donde la edad est√° guardada en una variable.

```{r}
edad <- 33
glue("La edad es de {edad} a√±os")
```

Dentro de las llaves tambi√©n podemos [**ejecutar operaciones**]{.hl-yellow}

```{r}
unidades <- "d√≠as"
glue("La edad es de {edad * 365} {unidades}")
```

#### Variables l√≥gicas

Otro tipo fundamental ser√°n las [**variables l√≥gicas o binarias**]{.hl-yellow} (**dos valores**):

-   `TRUE`: [**verdadero**]{.hl-yellow} guardado internamente como un 1.
-   `FALSE`: [**falso**]{.hl-yellow} guardado internamente como un 0.

```{r}
soltero <- TRUE # ¬øEs soltero? --> S√ç
class(soltero)
```


Dado que internamente est√°n guardados como variables binarias, podemos [**realizar operaciones aritm√©ticas**]{.hl-yellow} con ellas

```{r}
2 * TRUE
FALSE - 1
```


Como veremos en breve, las variables l√≥gicas en realidad puede tomar un tercer valor: `NA` o [**dato ausente**]{.hl-yellow}, representando las siglas de *not available*, y ser√° muy habitual encontrarlo dentro de una base de datos.

```{r}
ausente <- NA
ausente + 1
```

::: callout-important
## Importante

Las variables l√≥gicas [**NO son variables de texto**]{.hl-red}: `"TRUE"` es un texto, `TRUE` es un valor l√≥gico.

```{r}
#| error: true
TRUE + 1
"TRUE" + 1
```
:::


Los valores l√≥gicos suelen ser resultado de [**evaluar condiciones l√≥gicas**]{.hl-yellow}. Por ejemplo, imaginemos que queremos [**comprobar**]{.hl-yellow} si una persona se llama Javi.

```{r}
nombre <- "Mar√≠a"
```


Con el [**operador l√≥gico**]{.hl-yellow} `==` preguntamos s√≠ lo que tenemos guardado a la izquierda es [**igual que**]{.hl-purple} lo que tenemos a la derecha: es una [**pregunta**]{.hl-yellow}

```{r}
nombre == "Javi"
```

Con su opuesto `!=` preguntamos [**si es distinto**]{.hl-purple}.

```{r}
nombre != "Javi"
```


::: callout-note
## F√≠jate que...

No es lo mismo `<-` ([**asignaci√≥n**]{.hl-yellow}) que `==` (estamos [**preguntando**]{.hl-yellow}, es una comparaci√≥n l√≥gica).
:::


Adem√°s de las comparaciones ¬´igual a¬ª frente ¬´distinto¬ª, tambi√©n comparaciones de orden como [**menor que**]{.hl-purple} `<`, [**mayor que**]{.hl-purple} `>`,  `<=` o `>=`.

**¬øTiene la persona menos de 32 a√±os?**

```{r}
edad <- 34
edad < 32 # ¬øEs la edad menor de 32 a√±os?
```


**¬øLa edad es mayor o igual que 38 a√±os?**

```{r}
edad >= 38
```

**¬øEl nombre guardado es Javi?**

```{r}
nombre <- "Javi"
nombre == "Javi"
```

#### Variables de fecha

Un tipo de datos muy especial: los [**datos de tipo fecha**]{.hl-yellow}.

```{r}
fecha_char <- "2021-04-21"
```

Parece una simple cadena de texto pero [**deber√≠a representar un instante en el tiempo**]{.hl-yellow}. ¬øQu√© deber√≠a suceder si [**sumamos un 1 a una fecha**]{.hl-purple}?


```{r}
#| error: true
fecha_char + 1
```


Las fechas [**NO pueden ser texto**]{.hl-red}: debemos convertir la cadena de texto a fecha.


&nbsp;

Para trabajar con fechas usaremos el paquete `{lubridate}`, que deberemos instalar antes de poder usarlo.

```{r}
#| eval: false
install.packages("lubridate")
```



Una vez instalado, de todos los paquetes (libros) que tenemos, le indicaremos que nos cargue ese concretamente.

```{r}
library(lubridate) # instala si no lo has hecho

```


Para [**convertir a tipo fecha**]{.hl-yellow} usaremos la funci√≥n `as_date()` del paquete `{lubridate}` (por defecto en formato `yyyy-mm-dd`)

&nbsp;

```{r}
#| error: true
# ¬°no es una fecha, es un texto!
fecha_char + 1
class(fecha_char)
```

```{r}
fecha <- as_date("2023-03-28") # si es una fecha
fecha + 1
class(fecha)
```


En `as_date()` el formato de fecha por defecto es `yyyy-mm-dd` as√≠ que si la cadena de texto no se introduce de manera adecuada...

```{r}
as_date("28-03-2023")
```

... devuelve un ausnete.

Para [**cualquier otro formato debemos especificarlo**]{.hl-yellow} en el argumento opcional `format = ...` tal que `%d` representa d√≠as, `%m` meses, `%Y` en formato de 4 a√±os y `%y` en formato de 2 a√±os.

```{r}
as_date("28-03-2023", format = "%d-%m-%Y")
as_date("28-03-23", format = "%d-%m-%y")
as_date("03-28-2023", format = "%m-%d-%Y")
as_date("28/03/2023", format = "%d/%m/%Y")
```


En dicho paquete tenemos adem√°s funciones muy √∫tiles para [**manejar fechas**]{.hl-yellow}:

-   Con `today()` podemos obtener directamente la [**fecha actual**]{.hl-purple}.

```{r}
today()
```


-   Con `now()` podemos obtener la [**fecha y hora actual**]{.hl-purple}

```{r}
now()
```

-   Con `year()`, `month()` o `day()` podemos [**extraer el a√±o, mes y d√≠a**]{.hl-purple}

```{r}
fecha <- today()
year(fecha)
month(fecha)
```


![](img/lubridate.png)

::: callout-note
## Amplia contenido

Tienes un resumen en pdf de los paquetes m√°s importantes en la [**carpeta correspondiente en el campus**]{.hl-green}
:::



### Vectores: concatenar

Cuando trabajamos con datos normalmente tendremos [**columnas que representan variables**]{.hl-yellow}: llamaremos [**vectores**]{.hl-yellow} a una [**concatenaci√≥n**]{.hl-purple} de celdas (valores) del [**mismo tipo**]{.hl-purple} (lo que ser√≠a una columna de una tabla).

La forma m√°s sencilla es con el comando `c()` (c de **concatenar**), y basta con introducir sus **elementos entre par√©ntesis y separados por comas**

```{r}
edades <- c(32, 27, 60, 61)
edades
```


::: callout-tip
Un n√∫mero individual `x <- 1` (o bien `x <- c(1)`) es en realidad un **vector de longitud uno** --> todo lo que sepamos [**hacer con un n√∫mero podemos hacerlo con un vector de ellos**]{.hl-green}.
:::


![](img/edades_environment.jpg)

Como ves ahora en el `environment` tenemos una **colecci√≥n de elementos** guardada

```{r}
edades
```


De aqu√≠ en adelante calcularemos la [**longitud de un vector**]{.hl-yellow} con la funci√≥n `length()`

```{r}
length(edades)
```

Tambi√©n podemos [**concatenar vectores**]{.hl-yellow} entre s√≠ (los repite uno tras otro)

```{r}
c(edades, edades, 8)
```


#### Secuencias num√©ricas

El vector m√°s famoso ser√° el de tipo num√©rico, y en concreto, las conocidas como [**secuencias num√©ricas**]{.hl-yellow} (por ejemplo, los d√≠as del mes), usadas para, entre otras cosas, indexar bucles.

El comando `seq(inicio, fin)` nos permite crear una [**secuencia num√©rica**]{.hl-yellow} desde un elemento inicial hasta uno final, [**avanzando de uno en uno**]{.hl-purple}.

```{r}
seq(1, 31)
```

F√≠jate que si hacemos eso con [**caracteres no podremos hacerlo**]{.hl-red} ya que no hay un orden a priori entre textos.

```{r}
#| error: true
"a":"z"
```

Un atajo es el comando `1:n`, que nos devuelve lo mismo que `seq(1, n)`

```{r}
1:7
```

Si el elemento inicial es mayor que el final, entender√° que la secuencia es [**en orden decreciente**]{.hl-purple}.

```{r}
7:-3
```


Tambi√©n podemos definir [**otro tipo de distancia**]{.hl-yellow} (paso) entre consecutivos con el argumento `by = ...`

```{r}
seq(1, 7, by = 0.5) # secuencia desde 1 a 7 de 0.5 en 0.5
```


Otras veces nos interesar√° definir una [**secuencia con una longitud concreta**]{.hl-yellow}

```{r}
seq(1, 50, l = 7) # secuencia desde 1 a 50 de longitud 7
```


Incluso puede nos interese generar un vector de [**n elementos repetidos**]{.hl-yellow}

```{r}
rep(0, 7) # vector de 7 ceros
```

Dado que internamente son guardados como n√∫meros tambi√©n podremos hacer esto con [**fechas**]{.hl-yellow}.

```{r}
seq(as_date("2023-09-01"), as_date("2023-09-10"), by = 1)
```


#### Vectores de caracteres

Un vector es una **concatenaci√≥n** de elementos del [**mismo tipo**]{.hl-yellow}, pero no tienen porque ser necesariamente n√∫meros. Vamos a crear una frase de ejemplo.

```{r}
frase <- "Me llamo Javi"
frase
length(frase)
```

En el caso anterior no era un vector, era un solo elemento de texto. Para crear un vector debemos usar de nuevo `c()` y separar elementos entre comas

```{r}
vector <- c("Me", "llamo", "Javi")
vector
length(vector)
```


¬øQu√© suceder√° si [**concatenamos elementos de diferente tipo**]{.hl-yellow}?


```{r}
c(1, 2, "javi", "3", TRUE)
```

F√≠jate que como todos tienen que ser del mismo tipo, lo que hace `R` es [**convertir**]{.hl-yellow} todo a texto, violando la [**integridad del dato**]{.hl-red}


```{r}
c(3, 4, TRUE, FALSE)
```

Es importante entender que los valores l√≥gicos en realidad est√°n [**almacenados internamente como 0/1**]{.hl-yellow}


#### Operaciones con vectores

Con los vectores num√©ricos podemos hacer las mismas [**operaciones aritm√©ticas**]{.hl-yellow} que con los n√∫meros ‚Üí un [**n√∫mero es un vector**]{.hl-purple} (de longitud uno)


¬øQu√© suceder√° si [**sumamos o restamos un valor**]{.hl-yellow} a un vector?

```{r}
x <- c(1, 3, 5, 7)
x + 1
x * 2
```

::: callout-warning
## Cuidado

Salvo que indiquemos lo contrario, en `R` las operaciones con vectores son siempre [**elemento a elemento**]{.hl-orange}
:::

Los vectores tambi√©n pueden interactuar entre ellos, as√≠ que podemos definir, por ejemplo, [**sumas de vectores**]{.hl-yellow} (elemento a elemento)

```{r}
x <- c(2, 4, 6)
y <- c(1, 3, 5)
x + y
```



Dado que la operaci√≥n (por ejemplo, una suma) se realiza elemento a elemento, ¬øqu√© suceder√° si [**sumamos dos vectores de distinta longitud**]{.hl-yellow}?



```{r}
z <- c(1, 3, 5, 7)
x + z
```

Lo que hace es [**reciclar elementos**]{.hl-yellow}: si tiene un vector de 4 elementos y sumamos otro de 3 elementos, lo que har√° ser√° reciclar del vector con menor longitud.



Una operaci√≥n muy habitual es [**preguntar a los datos**]{.hl-yellow} mediante el uso de [**condiciones l√≥gicas**]{.hl-purple}. Por ejemplo, si definimos un vector de temperaturas...

[**¬øQu√© d√≠as hizo menos de 22 grados?**]{.hl-yellow}

```{r}
x <- c(15, 20, 31, 27, 15, 29)
```



```{r}
x < 22
```

Nos devolver√° un [**vector l√≥gico**]{.hl-yellow}, en funci√≥n de si **cada elemento** cumple o no la condici√≥n pedida (de **igual longitud** que el vector preguntado)


Si tuvi√©ramos un [**dato ausente**]{.hl-yellow} (por error del aparato ese d√≠a), la condici√≥n evaluada tambi√©n ser√≠a `NA`

```{r}
y <- c(15, 20, NA, 31, 27, 7, 29, 10)
y < 22
```


Las [**condiciones l√≥gicas pueden ser combinadas**]{.hl-yellow} de dos maneras:

-   [**Intersecci√≥n**]{.hl-yellow}: [**todas**]{.hl-purple} las condiciones concatenadas se deben cumplir ([**conjunci√≥n y**]{.hl-purple} con `&`) para devolver un `TRUE`

```{r}
x < 30 & x > 15
```

-   [**Uni√≥n**]{.hl-yellow}: basta con que [**al menos una**]{.hl-purple} se cumpla ([**conjunci√≥n o**]{.hl-purple} con `|`)

```{r}
x < 30 | x > 15
```


Adem√°s con `any()` y `all()` podemos comprobar que [**todos los elementos**]{.hl-yellow} cumplen

```{r}
any(x < 30)
all(x < 30)
```

##### Acceder a elementos

Otra operaci√≥n muy habitual es la de [**acceder a elementos**]{.hl-yellow}. La forma m√°s sencilla es usar el operador `[i]` (acceder al elemento i-√©simo)

```{r}
edades <- c(20, 30, 33, NA, 61) 
edades[3] # accedemos a la edad de la tercera persona 
```


Dado que un n√∫mero no es m√°s que un vector de longitud uno, esta operaci√≥n tambi√©n la podemos aplicar usando un [**vector de √≠ndices a seleccionar**]{.hl-yellow}

```{r}
y <- c("hola", "qu√©", "tal", "est√°s", "?")
y[c(1:2, 4)] # primer, segundo y cuarto elemento
```


::: callout-tip
Para acceder al √∫ltimo, sin preocuparnos de cu√°l es, podemos pasarle como √≠ndice la propia longitud `x[length(x)]`
:::

Otras veces no querremos seleccionar sino [**eliminar algunos elementos**]{.hl-yellow}. Deberemos repetir la misma operaci√≥n pero con el signo - delante: el operador `[-i]` no selecciona el elemento i-√©simo del vector sino que lo ¬´des-selecciona¬ª

```{r}
y
y[-2]
```


En muchas ocasiones los queremos [**seleccionar o eliminar en base a condiciones l√≥gicas**]{.hl-yellow}, en funci√≥n de los valores, as√≠ que pasaremos como √≠ndice la propia condici√≥n (recuerda, `x < 2` nos devuelve un vector l√≥gico)

```{r}
edades <- c(15, 21, 30, 17, 45)
nombres <- c("javi", "mar√≠a", "laura", "carla", "luis")
nombres[edades < 18] # nombres de los menores de edad
```

##### Operaciones estad√≠sticas

Tambi√©n podemos hacer uso de [**operaciones estad√≠sticas**]{.hl-yellow} como por ejemplo `sum()` que, dado un vector, nos devuelve la suma de todos sus elementos.

```{r}
x <- c(1, -2, 3, -1)
sum(x)
```

[**¬øQu√© sucede cuando falta un dato (ausente)?**]{.hl-yellow}


```{r}
x <- c(1, -2, 3, NA, -1)
sum(x)
```

Por defecto, si tenemos un dato ausente, la [**operaci√≥n tambi√©n ser√° ausente**]{.hl-yellow}. Para poder [**obviar ese dato**]{.hl-purple}, usamos un argumento opcional `na.rm = TRUE`

```{r}
sum(x, na.rm = TRUE)
```


Como hemos comentado que los valores l√≥gicos son guardados internamente como 0 y 1, podremos usarlos en operaciones aritm√©ticas. Por ejemplo, si queremos [**averiguar el n√∫mero de elementos que cumplen una condici√≥n**]{.hl-yellow} (por ejemplo, menores que 3), los que lo hagan tendr√°n asignado un 1 (`TRUE`) y los que no un 0 (`FALSE`) , por lo que basta con sumar dicho vector l√≥gico para obtener el n√∫mero de elementos que cumplen

```{r}
x <- c(2, 4, 6)
sum(x < 3)
```


Otra operaci√≥n habitual que puede sernos √∫til es la [**suma acumulada**]{.hl-yellow} con `cumsum()` que, dado un vector, nos devuelve un vector a su vez con el primero, el primero m√°s el segundo, el primero m√°s el segundo m√°s el tercero...y as√≠ sucesivamente.

```{r}
x <- c(1, 5, 2, -1, 8)
cumsum(x)
```

[**¬øQu√© sucede cuando falta un dato (ausente)?**]{.hl-yellow}


```{r}
x <- c(1, -2, 3, NA, -1)
cumsum(x)
```

En el caso de la suma acumulada lo que sucede es que [**a partir de ese valor, todo lo acumulado posterior ser√° ausente**]{.hl-yellow}.


Otra operaci√≥n habitual que puede sernos √∫til es la [**diferencia (con retardo)**]{.hl-yellow} con `diff()` que, dado un vector, nos devuelve un vector con el segundo menos el primero, el tercero menos el segundo, el cuarto menos el tercero...y as√≠ sucesivamente.


```{r}
x <- c(1, 8, 5, 3, 9, 0, -1, 5)
diff(x)
```



Con el argumento `lag = ` podemos indicar el [**retardo**]{.hl-yellow} de dicha diferencia (por ejemplo, `lag = 3` implica que se resta el cuarto menos el primero, el quinto menos el segundo, etc)


```{r}
x <- c(1, 8, 5, 3, 9, 0, -1, 5)
diff(x, lag = 3)
```

&nbsp;

Otras operaciones habituales son la [**media**]{.hl-yellow}, [**mediana**]{.hl-yellow}, [**percentiles**]{.hl-yellow}, etc.

-   [**Media**]{.hl-yellow}: medida de centralidad que consiste en sumar todos los elementos y dividirlos entre la cantidad de elementos sumados. La m√°s conocida pero la [**menos robusta**]{.hl-red}: dado un conjunto, si se introducen valores at√≠picos o outliers (valores muy grandes o muy peque√±os), la media se perturba con mucha facilidad.

```{r}
x <- c(165, 170, 181, 191, 150, 155, 167, NA, 173, 177)
mean(x, na.rm = TRUE)
```


-   [**Mediana**]{.hl-yellow}: medida de centralidad que consiste en ordenar los elementos y quedarse con el que ocupa la mitad.

```{r}
x <- c(165, 170, 181, 191, 150, 155, 167, 173, 177)
median(x)
```


-   [**Percentiles**]{.hl-yellow}: medidas de posici√≥n (nos dividen en partes iguales los datos).

```{r}
quantile(x) # por defecto percentiles 0-25-50-75-100
quantile(x, probs = c(0.1, 0.4, 0.9))
```

##### Ordenar vectores

Por √∫ltimo, una acci√≥n habitual es saber [**ordenar valores**]{.hl-yellow}:

-   `sort()`: devuelve el [**vector ordenado**]{.hl-yellow}. Por defecto de menor a mayor pero con `decreasing = TRUE` podemos cambiarlo

```{r}
edades <- c(81, 7, 25, 41, 65, 20, 33, 23, 77)
sort(edades)
sort(edades, decreasing = TRUE)
```


-   `order()`: devuelve el [**vector de √≠ndices**]{.hl-yellow} que tendr√≠amos que usar para tener el vector ordenado

```{r}
order(x)
x[order(x)]
```


### üíª Ejercicios

[**Intenta realizar los siguientes ejercicios sin mirar las soluciones**]{style="color:#444442;"}

::: panel-tabset
### [**Ejercicio 1**]{.hl-yellow}

üìù Define una variable que guarde tu edad (llamada `edad`) y otra con tu nombre (llamada `nombre`)

```{r}
#| code-fold: true
edad <- 33
nombre <- "Javi"
```

### [**Ejercicio 2**]{.hl-yellow}

üìù Comprueba con dicha variable `edad` si NO tiene 60 a√±os o si se llama `"Ornitorrinco"` (debes obtener variables l√≥gicas como resultado)

```{r}
#| code-fold: true
#| eval: false
edad != 60 # distinto de
nombre == "Ornitorrinco" # igual a
```

### [**Ejercicio 3**]{.hl-yellow}

üìù ¬øPor qu√© el c√≥digo inferior da error?

```{r}
#| error: true
edad + nombre
```


### [**Ejercicio 4**]{.hl-yellow}

üìù Define otra variable llamada `hermanos` que responda la pregunta ¬´¬øtienes hermanos?¬ª y otra variable que almacene tu fecha de nacimiento (llamada `fecha_nacimiento`).

```{r}
#| code-fold: true
hermanos <- TRUE

library(lubridate) # sino lo ten√≠as ya cargado
fecha_nacimiento <- as_date("1989-09-10")
```

### [**Ejercicio 5**]{.hl-yellow}

üìù Define otra variable con tus apellidos (llamada `apellidos`) y usa `glue()` para tener, en una sola variable  llamada `nombre_completo`, tu nombre y apellidos separando nombre y apellido por una coma

```{r}
#| code-fold: true
#| eval: false
apellidos <- "√Ålvarez Li√©bana"
glue("{nombre}, {apellidos}")
```

### [**Ejercicio 6**]{.hl-yellow}

üìù De `fecha_nacimiento` extrae el mes.

```{r}
#| code-fold: true
#| eval: false
month(fecha_nacimiento)
```

### [**Ejercicio 7**]{.hl-yellow}

üìù Calcula los d√≠as que han pasado desde la fecha de tu nacimiento hasta hoy (con la fecha de nacimiento definida en el ejercicio 4).

```{r}
#| code-fold: true
#| eval: false
today() - fecha_nacimiento
```

### [**Ejercicio 8**]{.hl-yellow}

üìù Define el vector `x` como la concatenaci√≥n de los 5 primeros n√∫meros impares. Calcula la longitud del vector

```{r}
#| code-fold: true
#| eval: false
# Dos formas
x <- c(1, 3, 5, 7, 9)
x <- seq(1, 9, by = 2)

length(x)
```

### [**Ejercicio 9**]{.hl-yellow}

üìù Accede al tercer elemento de `x`. Accede al √∫ltimo elemento (sin importar la longitud, un c√≥digo que pueda ejecutarse siempre). Elimina el primer elemento.

```{r}
#| code-fold: true
#| eval: false
x[3]
x[length(x)]
x[-1]
```

### [**Ejercicio 10**]{.hl-yellow}

üìù Obt√©n los elementos de `x` mayores que 4. Calcula el vector `1/x` y gu√°rdalo en una variable.

```{r}
#| code-fold: true
#| eval: false
x[x > 4]
z <- 1/x
z
```

### [**Ejercicio 11**]{.hl-yellow}

üìù Crea un vector que represente los nombres de 5 personas, de los cuales uno es desconocido.

```{r}
#| code-fold: true
#| eval: false
nombres <- c("Javi", "Sandra", NA, "Laura", "Carlos")
nombres
```

### [**Ejercicio 12**]{.hl-yellow}

üìù Encuentra del vector `x` de ejercicios anteriores los elementos mayores (estrictos) que 1 Y ADEM√ÅS menores (estrictos) que 7. Encuentra una forma de averiguar si todos los elementos son o no positivos.

```{r}
#| code-fold: true
#| eval: false
x[x > 1 & x < 7]
all(x > 0)
```

### [**Ejercicio 13**]{.hl-yellow}

üìù Dado el vector `x <- c(1, -5, 8, NA, 10, -3, 9)`,  ¬øpor qu√© su media no devuelve un n√∫mero sino lo que se muestra en el c√≥digo inferior?

```{r}
x <- c(1, -5, 8, NA, 10, -3, 9)
mean(x)
```

### [**Ejercicio 14**]{.hl-yellow}

üìù Dado el vector `x <- c(1, -5, 8, NA, 10, -3, 9)`, extrae los elementos que ocupan los lugares 1, 2, 5, 6. 

```{r}
#| code-fold: true
#| eval: false
x <- c(1, -5, 8, NA, 10, -3, 9)
x[c(1, 2, 5, 6)]
x[-2]
```

### [**Ejercicio 15**]{.hl-yellow}

üìù Dado el vector `x` del ejercicio anterior, ¬øcuales tienen un dato ausente? Pista: las funciones `is.algo()` comprueban si el elemento es tipo `algo` (tabula)

```{r}
#| code-fold: true
#| eval: false
is.na(x)
```


### [**Ejercicio 16**]{.hl-yellow}

üìù Define el vector `x` como la concatenaci√≥n de los 4 primeros n√∫meros pares. Calcula el n√∫mero de elementos de `x` menores estrictamente que 5.

```{r}
#| code-fold: true
#| eval: false
x[x < 5] 
sum(x < 5)
```


### [**Ejercicio 17**]{.hl-yellow}

üìù Calcula el vector `1/x` y obt√©n la versi√≥n ordenada (de menor a mayor) de las dos formas posibles

```{r}
#| code-fold: true
#| eval: false
z <- 1/x
sort(z)
z[order(z)]
```

### [**Ejercicio 18**]{.hl-yellow}

```{r}
#| code-fold: true
#| eval: false
min(x)
max(x)
```

### [**Ejercicio 19**]{.hl-yellow}

üìù Encuentra del vector `x` los elementos mayores (estrictos) que 1 y menores (estrictos) que 6. Encuentra una forma de averiguar si todos los elementos son o no negativos.

```{r}
#| code-fold: true
#| eval: false
x[x > 1 & x < 7]
all(x > 0)
```

:::


## üê£ Caso pr√°ctico: airquality

En el paquete `{datasets}` (ya instalado por defecto) tenemos diversos conjuntos de datos y uno de ellos es `airquality`. Debajo te he extra√≠do 3 variables de dicho dataset (f√≠jate que se hace con `datos$variable`, ese dolar ser√° importante).

Los datos capturan [**medidas diarias (n = 153 observaciones) de la calidad del aire**]{.hl-yellow} en Nueva York, de mayo a septiembre de 1973. Se midieron **6 variables**: niveles de ozono, radiaci√≥n solar, viento, temperatura, mes y d√≠a.

```{r}
library(datasets)
temperature <- airquality$Temp
month <- airquality$Month
day <- airquality$Day
```

### Pregunta 1

> ¬øC√≥mo averiguar qu√© [**representan los datos**]{.hl-yellow}? Piensa alg√∫n comando que nos d√© informaci√≥n sobre objetos en R, sabiendo que el nombre del dataset es `airquality`

```{r}
#| code-fold: true
#| eval: false
? airquality
```

Haciendo uso de `? ...` podemos consultar en el panel de ayuda lo que significa el objeto.

### Pregunta 2


> Accede solo a los 5 primeros registros de temperaturas. Despu√©s accede al primero, segundo, quinto y d√©cimo

```{r}
#| code-fold: true
#| eval: false

# secuencia de 1 a 5
temperature[1:5] 

# otra forma
temperature[c(1, 2, 3, 4, 5)]

# primero, segundo, quinto y d√©cimo
temperature[c(1, 2, 5, 10)]
```



### Pregunta 3

> Accede solo a los registros de temperaturas de mayo (tienes las temperaturas guardadas, piensa como acceder a ellos pero ahora usando una condici√≥n en lugar de √≠ndices concretos). Despu√©s accede a los elementos de mayo, abril y junio

```{r}
#| code-fold: true
#| eval: false

temperature[month == 5]

# abril, mayo y junio
temperature[month == 4 | month == 5 | month == 6]

# otra forma m√°s legible: %in% nos comprueba si 
# los valores est√°n dentro de una lista permitida
temperature[month %in% c(4, 5, 6)]
```

### Pregunta 4

> ¬øCu√°ntos [**registros tenemos de mayo**]{.hl-yellow}? ¬øY de abril? 

```{r}
#| code-fold: true
#| eval: false

# Una forma para registros de mayo
sum(month == 5)

# Otra forma: la longitud de un vector
length(temperature[month == 5])

# √≠dem en abril
sum(month == 4)
```

### Pregunta 5

> Construye una nueva variable `date` con la fecha de cada registro (combinando a√±o, mes y d√≠a), sabiendo que todos los datos son de 1973. Pista: para construir una fecha antes debes tener un vector de textos (por ejemplo, "1973-01-01")

```{r}
#| code-fold: true
#| eval: false

# variable de tipo date
library(lubridate)
dates <- as_date(glue("{1973}-{month}-{day}"))
```

### Pregunta 6

> Crea una nueva variable `temp_celsius` con la temperatura en ¬∫C (sabiendo que se calcula como $celsius = (fahr - 32) * (5/9)$). Tras ello calcula cu√°ntos d√≠as de junio superaron los 30 grados ¬∫C.

```{r}
#| code-fold: true
#| eval: false

# Temperatura en celsius
temp_celsius <- (temperature - 32) * (5/9)
temp_celsius 

# una forma
sum(temp_celsius[month == 6] > 30)

# otra forma
length(temp_celsius[month == 6 & temp_celsius > 30])
```

### Pregunta 7

> ¬øCu√°l fue la media de temperatura del mes de agosto? 

```{r}
#| code-fold: true
#| eval: false

# media en agosto
mean(temperature[month == 8], na.rm = TRUE)
mean(temp_celsius[month == 8], na.rm = TRUE)
```

### Pregunta 8

>  Dado el vector de temperaturas de agosto, ordena las temperaturas (los m√°s fr√≠os primero, los m√°s c√°lidos despu√©s). Hazlo de las dos maneras aprendidas. Usa despu√©s el paquete `{microbenchmark}` (inst√°lalo, c√°rgalo y busca en la ayuda la funci√≥n `microbenchmark` de dicho paquete) para comparar cu√°l de las dos opciones es m√°s r√°pida.


```{r}
#| code-fold: true
#| eval: false

# con sort
temp_sort <- sort(temp_celsius[month == 8])
temp_sort

# con order
temp_ord <- temp_celsius[month == 8][order(temp_celsius[month == 8])]
temp_ord

# microbenchmark
# install.packages("microbenchmark")
microbenchmark::microbenchmark(sort(temp_celsius[month == 8]),
                               temp_celsius[month == 8][order(temp_celsius[month == 8])],
                               times = 1000)

# ¬°Es m√°s eficiente datos[order(datos)] que sort(datos!
```







